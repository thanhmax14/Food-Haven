<!doctype html>
<html lang="en" data-layout="vertical" data-topbar="light" data-sidebar="dark" data-sidebar-size="lg"
    data-sidebar-image="none" data-preloader="disable" data-theme="default" data-theme-colors="default">


<!-- Mirrored from themesbrand.com/velzon/html/master/ManagerExpertRecipe-layouts.html by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 26 Feb 2025 12:22:12 GMT -->

<head>

    <meta charset="utf-8" />
    <title>Create ExpertRecipe | Velzon - Admin & Dashboard Template</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Premium Multipurpose Admin & Dashboard Template" name="description" />
    <meta content="Themesbrand" name="author" />
    <!-- App favicon -->
    <link rel="shortcut icon" href="~/assetsAdmin/images/favicon.ico">

    <!-- Layout config Js -->
    <script src="~/assetsAdmin/js/layout.js"></script>
    <!-- Bootstrap Css -->
    <link href="~/assetsAdmin/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <!-- Icons Css -->
    <link href="~/assetsAdmin/css/icons.min.css" rel="stylesheet" type="text/css" />
    <!-- App Css-->
    <link href="~/assetsAdmin/css/app.min.css" rel="stylesheet" type="text/css" />
    <!-- custom Css-->
    <link href="~/assetsAdmin/css/custom.min.css" rel="stylesheet" type="text/css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .card {
            box-shadow: 0 0.75rem 1.5rem rgba(18, 38, 63, 0.03);
            border: 1px solid #e9ecef;
        }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid #e9ecef;
            padding: 1.25rem;
        }

        .form-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 0.5rem;
        }

        .form-control {
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            padding: 0.625rem 0.75rem;
        }

        .form-control:focus {
            border-color: #405189;
            box-shadow: 0 0 0 0.2rem rgba(64, 81, 137, 0.25);
        }

        .btn-add-step {
            background-color: #f8f9fa;
            border: 1px dashed #ced4da;
            color: #6c757d;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            transition: all 0.3s ease;
        }

        .btn-add-step:hover {
            background-color: #405189;
            border-color: #405189;
            color: white;
        }

        .btn-remove {
            background-color: #dc3545;
            border-color: #dc3545;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
        }

        .step-item {
            border: 1px solid #e9ecef;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 0.75rem;
            background-color: #fff;
            position: relative;
        }

        .step-number {
            background-color: #405189;
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .is-invalid {
            border-color: #dc3545;
        }

        .text-muted {
            color: #6c757d !important;
        }
    </style>
    <style>
        /* Fix: Ẩn invalid-feedback mặc định, chỉ hiện khi có class is-invalid */
        .invalid-feedback {
            display: none !important;
        }

        /* Chỉ hiện invalid-feedback khi element có class is-invalid */
        .is-invalid ~ .invalid-feedback,
        .form-control.is-invalid ~ .invalid-feedback,
        .was-validated .form-control:invalid ~ .invalid-feedback {
            display: block !important;
        }

        /* Đảm bảo field-validation-error luôn hiển thị */
        .field-validation-error {
            display: block !important;
        }

        /* Style cho error message */
        .field-validation-error {
            font-size: 0.875rem;
            color: #dc3545;
            margin-top: 0.25rem;
        }

        /* Đảm bảo form control có border đỏ khi invalid */
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }

        /* Smooth transition cho validation states */
        .form-control {
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
    </style>
</head>

<body>

    <!-- Begin page -->
    <div id="layout-wrapper">

        @await Html.PartialAsync("_headeradmin")
        <!-- removeNotificationModal -->
        <div id="removeNotificationModal" class="modal fade zoomIn" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                            id="NotificationModalbtn-close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mt-2 text-center">
                            <lord-icon src="https://cdn.lordicon.com/gsqxdxog.json" trigger="loop"
                                colors="primary:#f7b84b,secondary:#f06548" style="width:100px;height:100px"></lord-icon>
                            <div class="mt-4 pt-2 fs-15 mx-4 mx-sm-5">
                                <h4>Are you sure ?</h4>
                                <p class="text-muted mx-4 mb-0">Are you sure you want to remove this Notification ?</p>
                            </div>
                        </div>
                        <div class="d-flex gap-2 justify-content-center mt-4 mb-2">
                            <button type="button" class="btn w-sm btn-light" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn w-sm btn-danger" id="delete-notification">Yes, Delete
                                It!</button>
                        </div>
                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <!-- ========== App Menu ========== -->
        <div class="app-menu navbar-menu">
            <!-- LOGO -->
            <div class="navbar-brand-box">
                <!-- Dark Logo-->
                <a class="logo logo-dark">
                    <span class="logo-sm">
                        <img src="~/assetsAdmin/images/logo-sm.svg" alt="" height="22">
                    </span>
                    <span class="logo-lg">
                        <img src="~/assetsAdmin/images/logo-dark.svg" alt="" height="35">
                    </span>
                </a>
                <!-- Light Logo-->
                <a class="logo logo-light">
                    <span class="logo-sm">
                        <img src="~/assetsAdmin/images/logo-sm.svg" alt="" height="22">
                    </span>
                    <span class="logo-lg">
                        <img src="~/assetsAdmin/images/logo-light.svg" alt="" height="35">
                    </span>
                </a>
                <button type="button" class="btn btn-sm p-0 fs-20 header-item float-end btn-vertical-sm-hover"
                        id="vertical-hover">
                    <i class="ri-record-circle-line"></i>
                </button>
            </div>

              <div id="scrollbar">
                <div class="container-fluid">
                    <div id="two-column-menu">
                    </div>
                    <ul class="navbar-nav" id="navbar-nav">
                        <li class="menu-title"><span data-key="t-menu">Menu</span></li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="Admin" asp-action="Index">
                                <i class=" ri-pie-chart-line"></i> <span>Revenue Statistics</span>
                            </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="WithdrawList">
                            <i class="ri-exchange-dollar-line"></i> <span>Withdrawal Requests From Users</span>
                        </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="Managercomplant">
                            <i class="ri-error-warning-line"></i> <span>Order Complaint Reports From Seller</span>
                        </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="Admin" asp-action="ManagerUser">
                                <i class="ri-account-circle-line"></i> <span>User Accounts</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="Admin" asp-action="ManagementSeller">
                                <i class="ri-user-add-line"></i> <span>Seller Registration Requests</span>
                            </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="ViewStoreRegistration">
                            <i class="ri-file-add-line"></i> <span>Store Registration Requests</span>
                        </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="Admin" asp-action="ViewAdminStore">
                                <i class="ri-store-2-line"></i> <span>Store</span>
                            </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="ManagementReportStore">
                            <i class="ri-alert-line"></i> <span>Store Reports From User</span>
                        </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="Admin" asp-action="ViewCategories">
                                <i class="ri-folder-2-line"></i> <span>Categories</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link " asp-controller="Admin" asp-action="ManagementRecipe">
                                <i class="ri-restaurant-2-line"></i> <span>Cooking Recipes</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link active" asp-controller="Admin" asp-action="ManagerExpertRecipe">
                                <i class="ri-restaurant-2-line"></i> <span>Manager ExpertRecipe</span>
                            </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="GetAllIngredientTag">
                            <i class=" ri-price-tag-3-line"></i> <span>Ingredient Tag</span>
                        </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="GetAllTypeOfDish">
                            <i class="ri-restaurant-line"></i> <span>Type of Dish</span>
                        </a>
                        </li>
                        <li class="nav-item"></li>
                        <a class="nav-link menu-link" asp-controller="Admin" asp-action="ManagerVoucher">
                            <i class=" ri-coupon-2-line"></i> <span>Voucher</span>
                        </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="Admin" asp-action="Chat">
                                <i class="ri-chat-3-line"></i> <span>Chat</span>
                            </a>
                        </li>
                        <!--<li class="nav-item">
                            <a class="nav-link menu-link" href="">
                                <i class="ri-notification-2-line"></i> <span>Notifications</span>
                            </a>
                        </li> -->
                    </ul>
                </div>
            </div>
            <!-- Sidebar -->
        </div>
        <div class="sidebar-background"></div>
      </div>

        <!-- ============================================================== -->
        <!-- Start right Content here -->
        <!-- ============================================================== -->
        <div class="main-content">

            <div class="page-content">
                <div class="container-fluid">

                    <!-- start page title -->
                    <div class="row">
                        <div class="col-12">
                            <div
                                class="page-title-box d-sm-flex align-items-center justify-content-between bg-galaxy-transparent">
                                <h4 class="mb-sm-0">Create ExpertRecipe</h4>

                                <div class="page-title-right">
                                    <ol class="breadcrumb m-0">
                                    <li class="breadcrumb-item"><a href="/admin/managerExpertRecipe">Manager ExpertRecipe</a></li>
                                        <li class="breadcrumb-item active">Create ExpertRecipe</li>
                                    </ol>
                                </div>

                            </div>
                        </div>
                    </div>
                    <!-- end page title -->
                    <div class="row">

                        <div class="col-12" style="float: right;">
                            <div class="card">
                                <div class="border rounded p-3 bg-light">
                                    <h6 class="mb-3">Import From File CSV</h6>
                                    <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal"
                                        data-bs-target="#uploadModal">
                                        <i class="fas fa-upload me-2"></i>Select CSV File
                                    </button>
                                    <div class="mt-2 text-muted small">
                                        <strong>Note:</strong> The CSV file must be in UTF-8 format and contain the
                                        following columns: Title, Ingredients,
                                        Directions, link, source, NER

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="card">


                                <div class="card-body">
                                    <form id="recipeForm" novalidate>
                                        <div class="row g-3">
                                            <!-- Title Field -->
                                            <div class="col-12">
                                                <label for="title" class="form-label">Title <span
                                                        class="text-danger">*</span></label>
                                                <input type="text" class="form-control" id="title" maxlength="200"
                                                    required>
                                                <div class="invalid-feedback">
                                                    Please enter a title (maximum 200 characters).
                                                </div>
                                                <div class="form-text">
                                                    <span id="titleCount">0</span>/200 characters.
                                                </div>
                                            </div>

                                            <!-- Ingredients Section -->
                                            <div class="col-12">
                                                <label class="form-label">Ingredients <span
                                                        class="text-danger">*</span></label>
                                                <div id="ingredientsContainer">
                                                    <div class="step-item">
                                                        <div class="d-flex align-items-center mb-2">
                                                            <span class="step-number me-2">1</span>
                                                            <span class="fw-medium">Ingredients 1</span>
                                                        </div>
                                                        <textarea class="form-control ingredient-input" maxlength="1500"
                                                            rows="3" required></textarea>
                                                        <div class="invalid-feedback">
                                                            Please enter the ingredients (maximum 1500 characters).
                                                        </div>
                                                        <div class="form-text">
                                                            <span class="ingredient-count">0</span>/1500 characters.
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-add-step"
                                                    onclick="addIngredient()">
                                                    <i class="fas fa-plus me-1"></i> Add Ingredients
                                                </button>
                                            </div>

                                            <!-- Directions Section -->
                                            <div class="col-12">
                                                <label class="form-label">Directions <span
                                                        class="text-danger">*</span></label>
                                                <div id="directionsContainer">
                                                    <div class="step-item">
                                                        <div class="d-flex align-items-center mb-2">
                                                            <span class="step-number me-2">1</span>
                                                            <span class="fw-medium">Steps 1</span>
                                                        </div>
                                                        <textarea class="form-control direction-input" maxlength="2500"
                                                            rows="4" required></textarea>
                                                        <div class="invalid-feedback">
                                                            Please enter the directions (maximum 2500 characters).
                                                        </div>
                                                        <div class="form-text">
                                                            <span class="direction-count">0</span>/2500 characters.
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-add-step" onclick="addDirection()">
                                                    <i class="fas fa-plus me-1"></i> Add Steps
                                                </button>
                                            </div>

                                            <!-- NER Section -->
                                            <div class="col-12">
                                                <label class="form-label">NER (Named Entity Recognition)</label>
                                                <div id="nerContainer">
                                                    <div class="step-item">
                                                        <div class="d-flex align-items-center mb-2">
                                                            <span class="step-number me-2">1</span>
                                                            <span class="fw-medium">NER 1</span>
                                                        </div>
                                                        <textarea class="form-control ner-input" maxlength="1000"
                                                            rows="3" required></textarea>
                                                        <div class="invalid-feedback">
                                                            Maximum 1000 characters.
                                                        </div>
                                                        <div class="form-text">
                                                            <span class="ner-count">0</span>/1000 characters.
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-add-step" onclick="addNER()">
                                                    <i class="fas fa-plus me-1"></i> Add NER
                                                </button>
                                            </div>

                                            <!-- Link và Source -->
                                            <div class="col-md-6">
                                                <label for="link" class="form-label">Link</label>
                                                <input type="url" class="form-control" id="link"
                                                    placeholder="https://example.com">
                                                <div class="invalid-feedback">
                                                    Please enter a valid URL.
                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <label for="source" class="form-label">Source</label>
                                                <input type="text" class="form-control" id="source" maxlength="100">
                                                <div class="invalid-feedback">
                                                    Maximum 100 characters.
                                                </div>
                                                <div class="form-text">
                                                    <span id="sourceCount">0</span>/100 characters.
                                                </div>
                                            </div>

                                            <!-- Upload File Section -->

                                        </div>

                                    <div class="mt-4">
                                        <a href="/admin/managerExpertRecipe" class="btn btn-secondary me-2">
                                            <i class="fas fa-arrow-left me-1"></i>Back
                                        </a>

                                        <button type="reset" class="btn btn-secondary">
                                            <i class="fas fa-times me-1"></i> Reset
                                        </button>

                                        <button type="submit" class="btn btn-success me-2" id="submitBtn">
                                            <i class="fas fa-check me-1" id="submitIcon"></i>
                                            <span id="submitText">Create</span>
                                        </button>
                                    </div>

                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Upload Modal -->

                    <div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="uploadModalLabel">
                                        <i class="fas fa-upload me-2"></i>Upload CSV File
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <!-- File input -->
                                    <div class="mb-3">
                                        <label for="csvFile" class="form-label">Select CSV file</label>
                                        <input type="file" class="form-control" id="csvFile" accept=".csv" required>
                                        <div class="invalid-feedback">
                                            Please select a valid CSV file.
                                        </div>
                                    </div>

                                    <!-- File directions -->
                                    <div class="alert alert-info">
                                        <h6 class="alert-heading">
                                            <i class="fas fa-info-circle me-2"></i>CSV File Rules:
                                        </h6>
                                        <ul class="mb-0">
                                            <li>The file must be in <strong>.csv</strong> format and encoded in
                                                <strong>UTF-8</strong>.
                                            </li>
                                        <li>The file must be in <strong>.csv</strong> format, encoded in <strong>UTF-8</strong>, and no larger than <strong>100MB</strong>.</li>

                                            <li>The first row must contain the following columns:
                                                <code>Title,Ingredients,Directions,NER,Link,Source</code>
                                            </li>
                                            <li>Title: Maximum 200 characters. (required)</li>
                                            <li>Ingredients: Maximum 1500 characters. (required)</li>
                                            <li>Directions: Maximum 2500 characters. (required)</li>
                                            <li>Link: Must be a valid URL (required)</li>
                                            <li>Source: Maximum 100 characters.(required)</li>
                                            <li>NER: Maximum 1000 characters.(required)</li>
                                            <li><strong>Note:</strong> Ingredients, Directions, and NER must be in
                                                <code>JSON string array</code> format.<br>
                                                Example: <code>[""item1"", ""item2""]</code>
                                            </li>
                                        </ul>
                                    </div>

                                    <!-- Example -->
                                    <div class="mb-3">
                                        <h6>Sample format:</h6>
                                        <div class="bg-light p-2 rounded small">
                                            <code>
                                            Title,Ingredients,Directions,Link,Source,NER<br>
                                                No-Bake Nut Cookies,"[""1 c. brown sugar"", ""1/2 c. milk""]","[""Step 1"", ""Step 2""]","https://example.com","Blog A,"[""sugar"", ""milk""]""
                                            </code>
                                        </div>
                                    </div>

                                    <!-- Loading indicator -->
                                    <div id="uploadProgress" class="d-none">
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <span>Processing file...</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Footer buttons -->
                            <!-- Footer buttons -->
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" id="uploadBtn" onclick="uploadFile()">
                                    <i class="fas fa-upload me-1" id="uploadIcon"></i>
                                    <span id="uploadText">Upload</span>
                                </button>
                            </div>

                            </div>
                        </div>
                    </div>

                    <!-- Error Modal -->
                <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-xl">
                        <div class="modal-content">
                            <div class="modal-header bg-danger text-white">
                                <h5 class="modal-title" id="errorModalLabel">
                                    <i class="fas fa-exclamation-triangle me-2"></i>Import File Errors
                                </h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-warning">
                                    <strong id="errorSummary">Your file contains some errors that must be fixed before importing:</strong>
                                </div>
                                <div class="table-responsive" style="max-height: 60vh; overflow-y: auto;">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Row</th>
                                                <th>Column</th>
                                                <th>Value</th>
                                                <th>Error</th>
                                                <th>Status</th> <!-- ✅ Added -->
                                            </tr>
                                        </thead>
                                        <tbody id="errorTableBody">
                                            <!-- Errors will be populated here -->
                                        </tbody>
                                    </table>
                                </div>
                                <div class="mt-3">
                                    <small class="text-muted">
                                        <strong>Note:</strong> Please correct the above errors in your CSV file and try uploading again.
                                    </small>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" onclick="downloadErrorReport()">
                                    <i class="fas fa-download me-1"></i>Download Error Report
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                </div>
                <!-- container-fluid -->
            </div>
            <!-- End Page-content -->
        @await Html.PartialAsync("_Footer_Admin_Seller")
        </div>
        <!-- end main content-->

    </div>
    <!-- END layout-wrapper -->





    <!--start back-to-top-->
    <button onclick="topFunction()" class="btn btn-danger btn-icon" id="back-to-top">
        <i class="ri-arrow-up-line"></i>
    </button>
    <!--end back-to-top-->


    <!-- JAVASCRIPT -->
    <script src="~/assetsAdmin/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/assetsAdmin/libs/simplebar/simplebar.min.js"></script>
    <script src="~/assetsAdmin/libs/node-waves/waves.min.js"></script>
    <script src="~/assetsAdmin/libs/feather-icons/feather.min.js"></script>
    <script src="~/assetsAdmin/js/pages/plugins/lord-icon-2.1.0.js"></script>
    <script src="~/assetsAdmin/js/plugins.js"></script>

    <!-- prismjs plugin -->
    <script src="~/assetsAdmin/libs/prismjs/prism.js"></script>

    <script src="~/assetsAdmin/js/app.js"></script>

</body>


<!-- Mirrored from themesbrand.com/velzon/html/master/ManagerExpertRecipe-layouts.html by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 26 Feb 2025 12:22:12 GMT -->

</html>
<script>
    let ingredientCount = 1;
    let directionCount = 1;
    let nerCount = 1;
    let formSubmitted = false; // Flag để track xem form đã submit chưa

    // Character counting functions
    function setupCharacterCounter(selector, countSelector) {
        document.addEventListener('input', function (e) {
            if (e.target.matches(selector)) {
                const maxLength = e.target.getAttribute('maxlength');
                const currentLength = e.target.value.length;
                const counter = e.target.closest('.step-item, .col-12, .col-md-6').querySelector(countSelector);
                if (counter) {
                    counter.textContent = currentLength;
                    if (currentLength >= maxLength * 0.9) {
                        counter.style.color = '#dc3545';
                    } else {
                        counter.style.color = '#6c757d';
                    }
                }
            }
        });
    }

    // Setup character counters
    setupCharacterCounter('#title', '#titleCount');
    setupCharacterCounter('#source', '#sourceCount');
    setupCharacterCounter('.ingredient-input', '.ingredient-count');
    setupCharacterCounter('.direction-input', '.direction-count');
    setupCharacterCounter('.ner-input', '.ner-count');

    function addIngredient() {
        ingredientCount++;
        const container = document.getElementById('ingredientsContainer');
        const newItem = document.createElement('div');
        newItem.className = 'step-item';
        newItem.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex align-items-center">
                        <span class="step-number me-2">${ingredientCount}</span>
                        <span class="fw-medium">Ingredients ${ingredientCount}</span>
                    </div>
                    <button type="button" class="btn btn-remove btn-sm" onclick="removeStep(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <textarea class="form-control ingredient-input" maxlength="1500" rows="3" required></textarea>
                <div class="invalid-feedback">
                    Please enter the ingredients (maximum 1500 characters).
                </div>
                <div class="form-text">
                    <span class="ingredient-count">0</span>/1500 characters.
                </div>
            `;
        container.appendChild(newItem);
    }

    function addDirection() {
        directionCount++;
        const container = document.getElementById('directionsContainer');
        const newItem = document.createElement('div');
        newItem.className = 'step-item';
        newItem.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex align-items-center">
                        <span class="step-number me-2">${directionCount}</span>
                        <span class="fw-medium">Steps ${directionCount}</span>
                    </div>
                    <button type="button" class="btn btn-remove btn-sm" onclick="removeStep(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <textarea class="form-control direction-input" maxlength="2500" rows="4" required></textarea>
                <div class="invalid-feedback">
                    Please enter the directions (maximum 2500 characters).
                </div>
                <div class="form-text">
                    <span class="direction-count">0</span>/2500 characters.
                </div>
            `;
        container.appendChild(newItem);
    }

    function addNER() {
        nerCount++;
        const container = document.getElementById('nerContainer');
        const newItem = document.createElement('div');
        newItem.className = 'step-item';
        newItem.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex align-items-center">
                        <span class="step-number me-2">${nerCount}</span>
                        <span class="fw-medium">NER ${nerCount}</span>
                    </div>
                    <button type="button" class="btn btn-remove btn-sm" onclick="removeStep(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <textarea class="form-control ner-input" maxlength="1000" rows="3"></textarea>
                <div class="invalid-feedback">
                    Maximum 1000 characters.
                </div>
                <div class="form-text">
                    <span class="ner-count">0</span>/1000 characters.
                </div>
            `;
        container.appendChild(newItem);
    }

    function removeStep(button) {
        const stepItem = button.closest('.step-item');
        stepItem.remove();

        // Re-number the remaining steps
        updateStepNumbers();
    }

    function updateStepNumbers() {
        // Update ingredients
        const ingredients = document.querySelectorAll('#ingredientsContainer .step-item');
        ingredients.forEach((item, index) => {
            const number = item.querySelector('.step-number');
            const label = item.querySelector('.fw-medium');
            number.textContent = index + 1;
            label.textContent = `Ingredients ${index + 1}`;
        });
        ingredientCount = ingredients.length;

        // Update directions
        const directions = document.querySelectorAll('#directionsContainer .step-item');
        directions.forEach((item, index) => {
            const number = item.querySelector('.step-number');
            const label = item.querySelector('.fw-medium');
            number.textContent = index + 1;
            label.textContent = `Steps ${index + 1}`;
        });
        directionCount = directions.length;

        // Update NER
        const ners = document.querySelectorAll('#nerContainer .step-item');
        ners.forEach((item, index) => {
            const number = item.querySelector('.step-number');
            const label = item.querySelector('.fw-medium');
            number.textContent = index + 1;
            label.textContent = `NER ${index + 1}`;
        });
        nerCount = ners.length;
    }

    // Form validation
    document.getElementById('recipeForm').addEventListener('submit', function (e) {
        e.preventDefault();
        formSubmitted = true; // Đánh dấu form đã được submit
        let isValid = true;
        let firstInvalidField = null;
        const form = this;

        // Validate required fields
        const requiredFields = form.querySelectorAll('[required]');
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                field.classList.add('is-invalid');
                if (!firstInvalidField) {
                    firstInvalidField = field;
                }
                isValid = false;
            } else {
                field.classList.remove('is-invalid');
            }
        });

        // Validate URL
        const linkField = document.getElementById('link');
        if (linkField.value && !isValidURL(linkField.value)) {
            linkField.classList.add('is-invalid');
            if (!firstInvalidField) {
                firstInvalidField = linkField;
            }
            isValid = false;
        } else {
            linkField.classList.remove('is-invalid');
        }

        // Scroll to first error if validation fails
        if (!isValid && firstInvalidField) {
            scrollToError(firstInvalidField);
            return;
        }

        if (isValid) {
            // Thu thập dữ liệu từ form
            const recipeData = collectFormData();

            // Gửi AJAX request
            saveRecipe(recipeData);
        }
    });

    // Function to scroll to error field
    function scrollToError(errorField) {
        // Tìm container chứa field lỗi
        const container = errorField.closest('.step-item, .col-12, .col-md-6');

        if (container) {
            // Scroll to container with smooth animation
            container.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });

            // Focus vào field lỗi sau khi scroll
            setTimeout(() => {
                errorField.focus();
            }, 500);
        }
    }

    function collectFormData() {
        const ingredients = [];
        document.querySelectorAll('.ingredient-input').forEach(el => {
            const value = el.value.trim();
            if (value) ingredients.push(value);
        });

        const directions = [];
        document.querySelectorAll('.direction-input').forEach(el => {
            const value = el.value.trim();
            if (value) directions.push(value);
        });

        const ner = [];
        document.querySelectorAll('.ner-input').forEach(el => {
            const value = el.value.trim();
            if (value) ner.push(value);
        });

        return {
            title: document.getElementById('title').value.trim(),
            ingredients: ingredients,     // ✅ là mảng thật
            directions: directions,       // ✅ là mảng thật
            ner: ner,                     // ✅ là mảng thật
            link: document.getElementById('link').value.trim(),
            source: document.getElementById('source').value.trim()
        };
    }
    function saveRecipe(recipeData) {
        const submitBtn = $('button[type="submit"]');
        const originalText = submitBtn.html();

        // Show loading spinner
        submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i> Saving...');
        submitBtn.prop('disabled', true);

        $.ajax({
            url: '/Admin/CreateExpertRecipe',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(recipeData),
            success: function (data) {
                // Restore button state
                submitBtn.html(originalText);
                submitBtn.prop('disabled', false);

                if (data.success) {
                    Swal.fire({
                        title: 'Recipe saved successfully!',
                        text: 'Do you want to create another one?',
                        icon: 'success',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            resetForm(); // Create new recipe
                        } else {
                            window.location.href = '/admin/managerExpertRecipe'; // Redirect
                        }
                    });
                } else {
                    showErrorMessage('An error occurred: ' + (data.message || 'Please check your input.'));

                    if (data.errors && data.errors.length > 0) {
                        displayValidationErrors(data.errors);
                    }
                }
            },
            error: function (xhr, status, error) {
                // Restore button
                submitBtn.html(originalText);
                submitBtn.prop('disabled', false);

                console.error('AJAX error:', error);
                showErrorMessage('An error occurred while saving. Please try again.');
            }
        });
    }


    function showSuccessMessage(message) {
        // Tạo alert thành công
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success alert-dismissible fade show';
        alertDiv.innerHTML = `
        <i class="fas fa-check-circle me-2"></i>${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

        // Chèn vào đầu form
        const form = document.getElementById('recipeForm');
        form.insertBefore(alertDiv, form.firstChild);

        // Scroll to top to show message
        alertDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

        // Tự động ẩn sau 5 giây
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }

    function showErrorMessage(message) {
        // Tạo alert lỗi
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger alert-dismissible fade show';
        alertDiv.innerHTML = `
        <i class="fas fa-exclamation-triangle me-2"></i>${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

        // Chèn vào đầu form
        const form = document.getElementById('recipeForm');
        form.insertBefore(alertDiv, form.firstChild);

        // Scroll to top to show error message
        alertDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

        // Tự động ẩn sau 10 giây
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 10000);
    }

    function displayValidationErrors(errors) {
        // Xóa các lỗi cũ
        document.querySelectorAll('.field-validation-error').forEach(el => el.remove());

        let firstErrorField = null;

        errors.forEach(error => {
            let targetElement = null;

            // Tìm element tương ứng với field bị lỗi
            switch (error.field.toLowerCase()) {
                case 'title':
                    targetElement = document.getElementById('title');
                    break;
                case 'ingredients':
                    targetElement = document.querySelector('.ingredient-input');
                    break;
                case 'directions':
                    targetElement = document.querySelector('.direction-input');
                    break;
                case 'link':
                    targetElement = document.getElementById('link');
                    break;
                case 'source':
                    targetElement = document.getElementById('source');
                    break;
                case 'ner':
                    targetElement = document.querySelector('.ner-input');
                    break;
            }

            if (targetElement) {
                // Add class lỗi
                targetElement.classList.add('is-invalid');

                // Lưu field lỗi đầu tiên để scroll
                if (!firstErrorField) {
                    firstErrorField = targetElement;
                }

                // Tạo div hiển thị lỗi
                const errorDiv = document.createElement('div');
                errorDiv.className = 'field-validation-error text-danger small mt-1';
                errorDiv.textContent = error.message;

                // Chèn sau element
                targetElement.parentNode.insertBefore(errorDiv, targetElement.nextSibling);
            }
        });

        // Scroll to first error field
        if (firstErrorField) {
            scrollToError(firstErrorField);
        }
    }

    function resetForm() {
        // Reset form
        document.getElementById('recipeForm').reset();
        formSubmitted = false; // Reset flag

        // Reset containers về trạng thái ban đầu
        resetContainers();

        // Reset counters
        document.querySelectorAll('[id$="Count"], .ingredient-count, .direction-count, .ner-count').forEach(counter => {
            counter.textContent = '0';
            counter.style.color = '#6c757d';
        });

        // Xóa các class validation
        document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        document.querySelectorAll('.field-validation-error').forEach(el => el.remove());

        // Xóa alerts
        document.querySelectorAll('.alert').forEach(el => el.remove());
    }

    function resetContainers() {
        // Reset ingredients container
        const ingredientsContainer = document.getElementById('ingredientsContainer');
        ingredientsContainer.innerHTML = `
        <div class="step-item">
            <div class="d-flex align-items-center mb-2">
                <span class="step-number me-2">1</span>
                <span class="fw-medium">Ingredients 1</span>
            </div>
            <textarea class="form-control ingredient-input" maxlength="1500" rows="3" required></textarea>
            <div class="invalid-feedback">
                Please enter the ingredients (maximum 1500 characters).
            </div>
            <div class="form-text">
                <span class="ingredient-count">0</span>/1500 characters.
            </div>
        </div>
    `;

        // Reset directions container
        const directionsContainer = document.getElementById('directionsContainer');
        directionsContainer.innerHTML = `
        <div class="step-item">
            <div class="d-flex align-items-center mb-2">
                <span class="step-number me-2">1</span>
                <span class="fw-medium">Steps 1</span>
            </div>
            <textarea class="form-control direction-input" maxlength="2500" rows="4" required></textarea>
            <div class="invalid-feedback">
                Please enter the directions (maximum 2500 characters).
            </div>
            <div class="form-text">
                <span class="direction-count">0</span>/2500 characters.
            </div>
        </div>
    `;

        // Reset NER container
        const nerContainer = document.getElementById('nerContainer');
        nerContainer.innerHTML = `
        <div class="step-item">
            <div class="d-flex align-items-center mb-2">
                <span class="step-number me-2">1</span>
                <span class="fw-medium">NER 1</span>
            </div>
            <textarea class="form-control ner-input" maxlength="1000" rows="3"></textarea>
            <div class="invalid-feedback">
                Maximum 1000 characters.
            </div>
            <div class="form-text">
                <span class="ner-count">0</span>/1000 characters.
            </div>
        </div>
    `;

        // Reset counters
        ingredientCount = 1;
        directionCount = 1;
        nerCount = 1;
    }

    function isValidURL(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    // Real-time validation - CHỈ hoạt động AFTER form đã submit
    document.addEventListener('input', function (e) {
        if (formSubmitted && e.target.hasAttribute('required') && e.target.value.trim()) {
            e.target.classList.remove('is-invalid');
            // Xóa error message tương ứng
            const errorDiv = e.target.parentNode.querySelector('.field-validation-error');
            if (errorDiv) {
                errorDiv.remove();
            }
        }

        // Validation cho URL field
        if (formSubmitted && e.target.id === 'link') {
            if (!e.target.value || isValidURL(e.target.value)) {
                e.target.classList.remove('is-invalid');
                const errorDiv = e.target.parentNode.querySelector('.field-validation-error');
                if (errorDiv) {
                    errorDiv.remove();
                }
            }
        }
    });

        // Reset modal when it opens
    document.getElementById('uploadModal').addEventListener('shown.bs.modal', function () {
        const fileInput = document.getElementById('csvFile');
        fileInput.value = '';
        fileInput.classList.remove('is-invalid');

        document.getElementById('uploadProgress').classList.add('d-none');

        // Reset button state
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadIcon = document.getElementById('uploadIcon');
        const uploadText = document.getElementById('uploadText');

        uploadBtn.disabled = false;
        uploadIcon.className = 'fas fa-upload me-1';
        uploadText.textContent = 'Upload';
    });

    function uploadFile() {
        const fileInput = document.getElementById('csvFile');
        const file = fileInput.files[0];

        if (!file) {
            fileInput.classList.add('is-invalid');
            return;
        }

        if (!file.name.toLowerCase().endsWith('.csv')) {
            fileInput.classList.add('is-invalid');
            showErrorMessage('Please select a file with the .csv extension.');
            return;
        }

        fileInput.classList.remove('is-invalid');

        document.getElementById('uploadProgress').classList.remove('d-none');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadIcon = document.getElementById('uploadIcon');
        const uploadText = document.getElementById('uploadText');

        uploadBtn.disabled = true;
        uploadIcon.className = 'fas fa-spinner fa-spin me-1';
        uploadText.textContent = 'Uploading...';

        const formData = new FormData();
        formData.append('file', file);

        fetch('/Admin/UploadCsv', {
            method: 'POST',
            body: formData,
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
            .then(response => response.json())
            .then(data => {
                uploadIcon.className = 'fas fa-upload me-1';
                uploadText.textContent = 'Upload';
                uploadBtn.disabled = false;
                document.getElementById('uploadProgress').classList.add('d-none');

                const uploadModal = bootstrap.Modal.getInstance(document.getElementById('uploadModal'));
                if (uploadModal) uploadModal.hide();

                if (data.success) {
                    if (data.data && data.data.length > 0) {
                        fillFormWithData(data.data);
                        showSuccessMessage(`Successfully imported ${data.data.length} recipe(s)!`);
                    } else {
                        showSuccessMessage('File import successful!');
                    }
                } else {
                    if (data.errors && data.errors.length > 0) {
                        showErrorModal(data.errors, data.totalSuccess || 0);
                    } else {
                        showErrorMessage(data.message || 'An error occurred during file import.');
                    }
                }
            })
            .catch(error => {
                const uploadModal = bootstrap.Modal.getInstance(document.getElementById('uploadModal'));
                if (uploadModal) uploadModal.hide();
                console.error('Error:', error);
                uploadIcon.className = 'fas fa-upload me-1';
                uploadText.textContent = 'Upload';
                uploadBtn.disabled = false;
                document.getElementById('uploadProgress').classList.add('d-none');
                showErrorMessage('An error occurred while uploading the file. Please try again.');
            });
    }


    function showErrorModal(errors, totalSuccess, statusMap = {}) {
        const errorTableBody = document.getElementById('errorTableBody');
        errorTableBody.innerHTML = '';

        const grouped = {};
        errors.forEach(e => {
            if (!grouped[e.row]) grouped[e.row] = [];
            grouped[e.row].push(e);
        });

        Object.entries(grouped).forEach(([rowNum, errs]) => {
            errs.forEach(error => {
                const safeValue = (error.value ?? '').toString();
                const status = statusMap[rowNum] === true ? '✔ Success' : '❌ Error';

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><span class="badge bg-secondary">${error.row}</span></td>
                    <td><strong>${escapeHtml(error.column)}</strong></td>
                    <td class="text-truncate" style="max-width: 300px;" title="${escapeHtml(safeValue)}">
                        ${escapeHtml(safeValue.length > 100 ? safeValue.slice(0, 100) + '...' : safeValue)}
                    </td>
                    <td><span class="text-danger">${escapeHtml(error.message)}</span></td>
                    <td><span class="${status.startsWith('✔') ? 'text-success' : 'text-danger'}">${status}</span></td>
                `;
                errorTableBody.appendChild(row);
            });
        });

        document.getElementById('errorSummary').innerHTML = `
            Total <b>${errors.length}</b> error(s), <b>${totalSuccess}</b> row(s) imported successfully.
        `;

        window.currentErrors = errors;

        const modal = new bootstrap.Modal(document.getElementById('errorModal'));
        modal.show();
    }

    function escapeHtml(unsafe) {
        return ('' + unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function fillFormWithData(recipes) {
        if (recipes && recipes.length > 0) {
            const recipe = recipes[0];

            document.getElementById('title').value = recipe.title || '';
            document.getElementById('link').value = recipe.link || '';
            document.getElementById('source').value = recipe.source || '';

            updateCharacterCount('title', 'titleCount');
            updateCharacterCount('source', 'sourceCount');

            if (recipe.ingredients && recipe.ingredients.length > 0) {
                const container = document.getElementById('ingredientsContainer');
                container.innerHTML = '';
                recipe.ingredients.forEach((ingredient, index) => {
                    addIngredientWithValue(ingredient, index + 1);
                });
            }

            if (recipe.directions && recipe.directions.length > 0) {
                const container = document.getElementById('directionsContainer');
                container.innerHTML = '';
                recipe.directions.forEach((direction, index) => {
                    addDirectionWithValue(direction, index + 1);
                });
            }

            if (recipe.ner && recipe.ner.length > 0) {
                const container = document.getElementById('nerContainer');
                container.innerHTML = '';
                recipe.ner.forEach((nerItem, index) => {
                    addNERWithValue(nerItem, index + 1);
                });
            }
        }
    }

    function addIngredientWithValue(value, number) {
        const container = document.getElementById('ingredientsContainer');
        const newItem = document.createElement('div');
        newItem.className = 'step-item';
        newItem.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <span class="step-number me-2">${number}</span>
                    <span class="fw-medium">Ingredient ${number}</span>
                </div>
                ${number > 1 ? '<button type="button" class="btn btn-remove btn-sm" onclick="removeStep(this)"><i class="fas fa-trash"></i></button>' : ''}
            </div>
            <textarea class="form-control ingredient-input" maxlength="1500" rows="3" required>${value}</textarea>
            <div class="invalid-feedback">
                Please enter ingredients (max 1500 characters).
            </div>
            <div class="form-text">
                <span class="ingredient-count">${value.length}</span>/1500 characters.
            </div>
        `;
        container.appendChild(newItem);
    }

    function addDirectionWithValue(value, number) {
        const container = document.getElementById('directionsContainer');
        const newItem = document.createElement('div');
        newItem.className = 'step-item';
        newItem.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <span class="step-number me-2">${number}</span>
                    <span class="fw-medium">Step ${number}</span>
                </div>
                ${number > 1 ? '<button type="button" class="btn btn-remove btn-sm" onclick="removeStep(this)"><i class="fas fa-trash"></i></button>' : ''}
            </div>
            <textarea class="form-control direction-input" maxlength="2500" rows="4" required>${value}</textarea>
            <div class="invalid-feedback">
                Please enter directions (max 2500 characters).
            </div>
            <div class="form-text">
                <span class="direction-count">${value.length}</span>/2500 characters.
            </div>
        `;
        container.appendChild(newItem);
    }

    function addNERWithValue(value, number) {
        const container = document.getElementById('nerContainer');
        const newItem = document.createElement('div');
        newItem.className = 'step-item';
        newItem.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <span class="step-number me-2">${number}</span>
                    <span class="fw-medium">NER ${number}</span>
                </div>
                ${number > 1 ? '<button type="button" class="btn btn-remove btn-sm" onclick="removeStep(this)"><i class="fas fa-trash"></i></button>' : ''}
            </div>
            <textarea class="form-control ner-input" maxlength="1000" rows="3">${value}</textarea>
            <div class="invalid-feedback">
                Maximum 1000 characters.
            </div>
            <div class="form-text">
                <span class="ner-count">${value.length}</span>/1000 characters.
            </div>
        `;
        container.appendChild(newItem);
    }

    function updateCharacterCount(inputId, countId) {
        const input = document.getElementById(inputId);
        const counter = document.getElementById(countId);
        if (input && counter) {
            counter.textContent = input.value.length;
        }
    }

       function downloadErrorReport() {
        if (!window.currentErrors) return;

        let csvContent = "Row,Column,Value,Error\n";

        window.currentErrors.forEach(error => {
            const row = escapeCsv(error.row);
            const column = escapeCsv(error.column);
            const value = escapeCsv(error.value ?? '');
            const message = escapeCsv(error.message);
            csvContent += `${row},${column},${value},${message}\n`;
        });

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'import_errors.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    function escapeCsv(value) {
        const stringValue = ('' + value).replace(/"/g, '""');  // Escape double quotes
        return `"${stringValue}"`;  // Wrap in quotes
    }

</script>