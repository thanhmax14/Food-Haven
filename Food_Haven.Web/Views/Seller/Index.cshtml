@using System.Security.Claims
﻿@using Microsoft.AspNetCore.Identity
@using Models
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@{
    Layout = "_loadNotify";
}


<!doctype html>
<html lang="en" data-layout="vertical" data-topbar="light" data-sidebar="dark" data-sidebar-size="lg"
    data-sidebar-image="none" data-preloader="disable" data-theme="default" data-theme-colors="default">


<!-- Mirrored from themesbrand.com/velzon/html/master// by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 26 Feb 2025 12:19:05 GMT -->

<head>

    <meta charset="utf-8" />
    <title>Dashboard | Seller</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Premium Multipurpose Admin & Dashboard Template" name="description" />
    <meta content="Themesbrand" name="author" />
    <!-- App favicon -->
    <link rel="shortcut icon" href="~/assetsAdmin/images/favicon.ico">

    <!-- jsvectormap css -->
    <link href="~/assetsAdmin/libs/jsvectormap/jsvectormap.min.css" rel="stylesheet" type="text/css" />

    <!--Swiper slider css-->
    <link href="~/assetsAdmin/libs/swiper/swiper-bundle.min.css" rel="stylesheet" type="text/css" />

    <!-- Layout config Js -->
    <script src="~/assetsAdmin/js/layout.js"></script>
    <!-- Bootstrap Css -->
    <link href="~/assetsAdmin/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <!-- Icons Css -->
    <link href="~/assetsAdmin/css/icons.min.css" rel="stylesheet" type="text/css" />
    <!-- App Css-->
    <link href="~/assetsAdmin/css/app.min.css" rel="stylesheet" type="text/css" />
    <!-- custom Css-->
    <link href="~/assetsAdmin/css/custom.min.css" rel="stylesheet" type="text/css" />
    <style>
        .wraphe {
            word-break: break-word;
            white-space: normal;
        }

        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        .search-box {
            position: relative;
            margin-bottom: 20px;
        }

            .search-box input {
                padding-left: 40px;
            }

            .search-box i {
                position: absolute;
                left: 12px;
                top: 50%;
                transform: translateY(-50%);
                color: #6c757d;
            }

        .filter-dropdown {
            min-width: 180px;
        }

        .product-image {
            width: 40px;
            height: 40px;
            background: #f8f9fa;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: #6c757d;
        }

        .avatar-sm {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            color: #495057;
        }

        .fs-14 {
            font-size: 14px !important;
        }

        .fs-12 {
            font-size: 12px !important;
        }

        .fw-medium {
            font-weight: 500 !important;
        }

        .text-reset {
            color: inherit !important;
            text-decoration: none;
        }

            .text-reset:hover {
                text-decoration: underline;
            }

        .badge {
            font-size: 11px;
            padding: 4px 8px;
        }

        .bg-danger-subtle {
            background-color: rgba(220, 53, 69, 0.1) !important;
        }

        .text-danger {
            color: #dc3545 !important;
        }

        .text-success {
            color: #198754 !important;
        }

        .table > :not(caption) > * > * {
            padding: 0.75rem;
            background-color: var(--bs-table-bg);
            border-bottom-width: 1px;
            box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg);
        }

        .table-hover > tbody > tr:hover > * {
            --bs-table-accent-bg: var(--bs-table-hover-bg);
            color: var(--bs-table-hover-color);
        }

        .table-nowrap th,
        .table-nowrap td {
            white-space: nowrap;
        }

        .table-centered th,
        .table-centered td {
            vertical-align: middle;
        }

        .status-pending {
            color: #f7b84b !important;
            background-color: rgba(247, 184, 75, 0.1) !important;
        }

        .status-preparing {
            color: #405189 !important;
            background-color: rgba(64, 81, 137, 0.1) !important;
        }

        .status-cancelled-user {
            color: #f06548 !important;
            background-color: rgba(240, 101, 72, 0.1) !important;
        }

        .status-cancelled-shop {
            color: #dc3545 !important;
            background-color: rgba(220, 53, 69, 0.1) !important;
        }

        .status-delivery-failed {
            color: #d63384 !important;
            background-color: rgba(214, 51, 132, 0.1) !important;
        }

        .status-delivering {
            color: #0d6efd !important;
            background-color: rgba(13, 110, 253, 0.1) !important;
        }

        .status-confirmed {
            color: #198754 !important;
            background-color: rgba(25, 135, 84, 0.1) !important;
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .error-message {
            display: none;
            color: #dc3545;
            text-align: center;
            padding: 20px;
        }

        .apexcharts-datalabels-group > text {
            fill: #405189 !important;
        }

        .card {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            padding: 1rem 1.25rem;
        }

        .badge {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            border-radius: 4px;
        }

        .pagination .page-link {
            border: 1px solid #dee2e6;
            color: #6c757d;
            padding: 0.375rem 0.75rem;
        }

        .pagination .page-item.active .page-link {
            background-color: #405189;
            border-color: #405189;
            color: white;
        }

        .pagination .page-link:hover {
            background-color: #e9ecef;
            border-color: #adb5bd;
        }
        .chart-container {
            position: relative;
            height: 400px;
        }
        
        .loading-spinner {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            z-index: 10;
        }
        
        .chart-loading-overlay {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            z-index: 20;
            align-items: center;
            justify-content: center;
        }
        
        .error-message {
            display: none;
            color: #dc3545;
            text-align: center;
            padding: 20px;
        }
        
        .fa-spin-custom {
            animation: fa-spin 2s infinite linear;
        }
       
        
        .no-data-chart {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 333px;
            flex-direction: column;
            color: #6c757d;
        }
    </style>
</head>

<body>

    <!-- Begin page -->
    <div id="layout-wrapper">

        @await Html.PartialAsync("_headeradmin")

        <!-- removeNotificationModal -->
        <div id="removeNotificationModal" class="modal fade zoomIn" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                            id="NotificationModalbtn-close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mt-2 text-center">
                            <lord-icon src="https://cdn.lordicon.com/gsqxdxog.json" trigger="loop"
                                colors="primary:#f7b84b,secondary:#f06548" style="width:100px;height:100px"></lord-icon>
                            <div class="mt-4 pt-2 fs-15 mx-4 mx-sm-5">
                                <h4>Are you sure ?</h4>
                                <p class="text-muted mx-4 mb-0">Are you sure you want to remove this Notification ?</p>
                            </div>
                        </div>
                        <div class="d-flex gap-2 justify-content-center mt-4 mb-2">
                            <button type="button" class="btn w-sm btn-light" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn w-sm btn-danger" id="delete-notification">Yes, Delete
                                It!</button>
                        </div>
                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <!-- ========== App Menu ========== -->
        <div class="app-menu navbar-menu">
            <!-- LOGO -->
            <div class="navbar-brand-box">
                <!-- Dark Logo-->
                <a href="/" class="logo logo-dark">
                    <span class="logo-sm">
                        <img src="~/assetsAdmin/images/logo-sm.png" alt="" height="22">
                    </span>
                    <span class="logo-lg">
                        <img src="~/assetsAdmin/images/logo-dark.png" alt="" height="17">
                    </span>
                </a>
                <!-- Light Logo-->
                <a href="/" class="logo logo-light">
                    <span class="logo-sm">
                        <img src="~/assetsAdmin/images/logo-sm.png" alt="" height="22">
                    </span>
                    <span class="logo-lg">
                        <img src="~/assetsAdmin/images/logo-light.png" alt="" height="17">
                    </span>
                </a>
                <button type="button" class="btn btn-sm p-0 fs-20 header-item float-end btn-vertical-sm-hover"
                    id="vertical-hover">
                    <i class="ri-record-circle-line"></i>
                </button>
            </div>

            <div class="dropdown sidebar-user m-1 rounded">
                <button type="button" class="btn material-shadow-none" id="page-header-user-dropdown"
                    data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="d-flex align-items-center gap-2">
                        <img class="rounded header-profile-user" src="~/assetsAdmin/images/users/avatar-1.jpg"
                            alt="Header Avatar">
                        <span class="text-start">
                            <span class="d-block fw-medium sidebar-user-name-text">Anna Adame</span>
                            <span class="d-block fs-14 sidebar-user-name-sub-text"><i
                                    class="ri ri-circle-fill fs-10 text-success align-baseline"></i> <span
                                    class="align-middle">Online</span></span>
                        </span>
                    </span>
                </button>
                <div class="dropdown-menu dropdown-menu-end">
                    <!-- item-->
                    <h6 class="dropdown-header">Welcome Anna!</h6>
                    <a class="dropdown-item" href="pages-profile.html"><i
                            class="mdi mdi-account-circle text-muted fs-16 align-middle me-1"></i> <span
                            class="align-middle">Profile</span></a>
                    <a class="dropdown-item" href="apps-chat.html"><i
                            class="mdi mdi-message-text-outline text-muted fs-16 align-middle me-1"></i> <span
                            class="align-middle">Messages</span></a>
                    <a class="dropdown-item" href="apps-tasks-kanban.html"><i
                            class="mdi mdi-calendar-check-outline text-muted fs-16 align-middle me-1"></i> <span
                            class="align-middle">Taskboard</span></a>
                    <a class="dropdown-item" href="pages-faqs.html"><i
                            class="mdi mdi-lifebuoy text-muted fs-16 align-middle me-1"></i> <span
                            class="align-middle">Help</span></a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="pages-profile.html"><i
                            class="mdi mdi-wallet text-muted fs-16 align-middle me-1"></i> <span
                            class="align-middle">Balance : <b>$5971.67</b></span></a>
                    <a class="dropdown-item" href="pages-profile-settings.html"><span
                            class="badge bg-success-subtle text-success mt-1 float-end">New</span><i
                            class="mdi mdi-cog-outline text-muted fs-16 align-middle me-1"></i> <span
                            class="align-middle">Settings</span></a>
                    <a class="dropdown-item" href="auth-lockscreen-basic.html"><i
                            class="mdi mdi-lock text-muted fs-16 align-middle me-1"></i> <span class="align-middle">Lock
                            screen</span></a>
                    <a class="dropdown-item" href="auth-logout-basic.html"><i
                            class="mdi mdi-logout text-muted fs-16 align-middle me-1"></i> <span class="align-middle"
                            data-key="t-logout">Logout</span></a>
                </div>
            </div>
            <div id="scrollbar">
                <div class="container-fluid">
                    <div id="two-column-menu">
                    </div>
                    <ul class="navbar-nav" id="navbar-nav">
                        <li class="menu-title"><span data-key="t-menu">Menu</span></li>
                        <li class="nav-item">
                            <a class="nav-link menu-link active" asp-controller="seller" asp-action="index">
                                <i class=" ri-pie-chart-line"></i> <span>Revenue Statistics</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="ViewStore">
                                <i class="ri-store-2-line"></i> <span>Store</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="ViewProductList">
                                <i class="ri-restaurant-2-fill"></i> <span>Products</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="ManageOrder">
                                <i class="ri-file-copy-2-line"></i> <span>Sales History</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="ManagerComplant">
                                <i class="ri-error-warning-line"></i> <span>Order Complaint</span>
                            </a>
                        </li>
                        <li class="nav-item"></li>
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="feedbacklist">
                                <i class="ri-question-answer-line"></i> <span>Feedback</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="ManagerVoucher">
                                <i class="ri-price-tag-3-line"></i> <span>Vouchers</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu-link" asp-controller="seller" asp-action="Chat">
                                <i class=" ri-chat-3-line"></i> <span>Chat</span>
                            </a>
                        </li>
                    </ul>
                </div>

            </div>
            <!-- Sidebar -->
        </div>
        <div class="sidebar-background"></div>
        </div>
        <!-- Left Sidebar End -->
        <!-- Vertical Overlay-->
        <div class="vertical-overlay"></div>

        <!-- ============================================================== -->
        <!-- Start right Content here -->
        <!-- ============================================================== -->

        <div class="main-content">

            <div class="page-content">
                <div class="container-fluid">

                    <div class="row">
                        <div class="col">

                            <div class="h-100">
                                <div class="row mb-3 pb-1">
                                    <div class="col-12">
                                        <div class="d-flex align-items-lg-center flex-lg-row flex-column">
                                            <div class="flex-grow-1">
                                               @if (SignInManager.IsSignedIn(User))
                                                {
                                                    <h4 class="fs-16 mb-1">Hello, @User.Identity.Name!</h4>
                                                }
                                                <p id="dateRangeLabel" class="text-muted mb-0">Processing statistics...</p>

                                            </div>
                                            <div class="mt-3 mt-lg-0">
                                                <form action="javascript:void(0);">
                                                    <div class="row g-3 mb-0 align-items-center">
                                                        <div class="col-sm-auto">
                                                            <div class="input-group">
                                                                <input type="text" id="dateRangeInput"
                                                                       class="form-control border-0 minimal-border dash-filter-picker shadow"
                                                                       placeholder="Chọn khoảng thời gian">
                                                                <div class="input-group-text bg-primary border-primary text-white">
                                                                    <i class="ri-calendar-2-line"></i>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <!--end col-->
                                                   @*      <div class="col-auto">
                                                            <button type="button"
                                                                class="btn btn-soft-success material-shadow-none"><i
                                                                    class="ri-add-circle-line align-middle me-1"></i>
                                                                Add Product</button>
                                                        </div> *@
                                                        <!--end col-->
                                                        <div class="col-auto">
                                                            <button type="button" id="refreshBtn"
                                                                    class="btn btn-soft-info btn-icon waves-effect material-shadow-none waves-light">
                                                                <i class="ri-refresh-line"></i>
                                                            </button>
                                                        </div>
                                                        <!--end col-->
                                                    </div>
                                                    <!--end row-->
                                                </form>
                                            </div>
                                        </div><!-- end card header -->
                                    </div>
                                    <!--end col-->
                                </div>
                                <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                             

                                <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
                                <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/vn.js"></script>
                                <script>
                                    function getDaysDiff(start, end) {
                                        return Math.floor((end - start) / (1000 * 60 * 60 * 24)) + 1;
                                    }

                                    function formatNumber(num) {
                                        return new Intl.NumberFormat('vi-VN').format(num);
                                    }

                                    function showLoading(show) {
                                        const cards = document.querySelectorAll('.stat-card');
                                        cards.forEach(card => card.classList.toggle('loading', show));
                                    }

                                    function updateStatistics(startDate, endDate) {
                                        const dayDiff = getDaysDiff(startDate, endDate);
                                        document.getElementById("dateRangeLabel").innerText =
                                        `Statistics for ${dayDiff} days (${startDate.toLocaleDateString('vi-VN')} - ${endDate.toLocaleDateString('vi-VN')})`;

                                        showLoading(true);

                                        $.ajax({
                                            url: '/Seller/GetStatisticsByDate',
                                            method: 'GET',
                                            data: {
                                                from: startDate.toISOString(),
                                                to: endDate.toISOString()
                                            },
                                            success: function (res) {
                                                $(".total-order").text(formatNumber(res.totalOrders));
                                                $(".total-earning").text(formatNumber(res.totalEarnings) + "₫");
                                                $(".cancel-rate-value").text(res.cancellationRate + "%");
                                                $(".pending-balance").text(formatNumber(res.pendingBalance) + "₫");

                                                if (res.period && res.period.isAdjusted) {
                                                    document.getElementById("dateRangeLabel").innerText =
                                                    `Statistics for ${res.period.days} days (${res.period.from} - ${res.period.to}) - Adjusted`;
                                                }
                                            },
                                            error: function (xhr) {
                                               Swal.fire(
     'Error',
     xhr.responseJSON?.error || 'An error occurred while retrieving statistics.',
     'error'
 );
                                                $(".total-order").text("0");
                                                $(".total-earning").text("0₫");
                                                $(".cancel-rate-value").text("0%");
                                                $(".pending-balance").text("0₫");
                                            },
                                            complete: function () {
                                                showLoading(false);
                                            }
                                        });
                                    }

                                    // Hàm helper để chuẩn hóa ngày về local time
                                    function normalizeToLocalDate(date) {
                                        const localDate = new Date(date);
                                        // Đặt giờ về 00:00:00 local time
                                        localDate.setHours(0, 0, 0, 0);
                                        return localDate;
                                    }

                                    // Hàm helper để convert ngày sang ISO string với local timezone
                                    function toLocalISOString(date) {
                                        const localDate = normalizeToLocalDate(date);
                                        // Tạo ISO string mà không bị ảnh hưởng timezone
                                        const year = localDate.getFullYear();
                                        const month = String(localDate.getMonth() + 1).padStart(2, '0');
                                        const day = String(localDate.getDate()).padStart(2, '0');
                                        return `${year}-${month}-${day}T00:00:00.000Z`;
                                    }

                                    function updateStatistics(startDate, endDate) {
                                        const dayDiff = getDaysDiff(startDate, endDate);
                                        document.getElementById("dateRangeLabel").innerText =
                                            `Statistics for ${dayDiff} day (${startDate.toLocaleDateString('vi-VN')} - ${endDate.toLocaleDateString('vi-VN')})`;

                                        showLoading(true);

                                        $.ajax({
                                            url: '/Seller/GetStatisticsByDate',
                                            method: 'GET',
                                            data: {
                                                // Sử dụng hàm helper để đảm bảo đúng ngày
                                                from: toLocalISOString(startDate),
                                                to: toLocalISOString(endDate)
                                            },
                                            success: function (res) {
                                                $(".total-order").text(formatNumber(res.totalOrders));
                                                $(".total-earning").text(formatNumber(res.totalEarnings) + "₫");
                                                $(".cancel-rate-value").text(res.cancellationRate + "%");
                                                $(".pending-balance").text(formatNumber(res.pendingBalance) + "₫");

                                                if (res.period && res.period.isAdjusted) {
                                                    document.getElementById("dateRangeLabel").innerText =
                                                        `Statistics for ${res.period.days} day (${res.period.from} - ${res.period.to}) - Adjusted`;
                                                }
                                            },
                                            error: function (xhr) {
                                             Swal.fire(
                                                'Error',
                                                xhr.responseJSON?.error || 'An error occurred while retrieving statistics.',
                                                'error'
                                            );
                                                $(".total-order").text("0");
                                                $(".total-earning").text("0₫");
                                                $(".cancel-rate-value").text("0%");
                                                $(".pending-balance").text("0₫");
                                            },
                                            complete: function () {
                                                showLoading(false);
                                            }
                                        });
                                    }

                                    $(document).ready(function () {
                                        $.ajax({
                                            url: '/Seller/GetDateConfig',
                                            method: 'GET',
                                            success: function (config) {
                                                console.log('Config received:', config);

                                                // Parse dates và chuẩn hóa về local time
                                                const maxDate = normalizeToLocalDate(new Date(config.maxDate));
                                                const minDate = normalizeToLocalDate(new Date(config.minDate));

                                                // Tính ngày mặc định
                                                const defaultEndDate = new Date(maxDate);
                                                const defaultStartDate = new Date(maxDate);
                                                defaultStartDate.setDate(maxDate.getDate() - (config.defaultDays - 1));

                                                if (defaultStartDate < minDate) {
                                                    defaultStartDate.setTime(minDate.getTime());
                                                }

                                                console.log('Normalized dates:', {
                                                    minDate: minDate.toLocaleDateString('vi-VN'),
                                                    maxDate: maxDate.toLocaleDateString('vi-VN'),
                                                    defaultStart: defaultStartDate.toLocaleDateString('vi-VN'),
                                                    defaultEnd: defaultEndDate.toLocaleDateString('vi-VN')
                                                });

                                                const fp = flatpickr("#dateRangeInput", {
                                                    mode: "range",
                                                    dateFormat: "d/m/Y",
                                                    minDate: minDate,
                                                    maxDate: maxDate,
                                                    locale: "vn",
                                                    defaultDate: [defaultStartDate, defaultEndDate],
                                                    allowInput: false,
                                                    onChange: function (selectedDates, dateStr, instance) {
                                                        console.log('Selected dates (before normalize):', selectedDates);
                                                        console.log('Selected dates (after normalize):', selectedDates.map(d => normalizeToLocalDate(d)));

                                                        if (selectedDates.length === 2) {
                                                            // Chuẩn hóa ngày trước khi gửi
                                                            const normalizedStart = normalizeToLocalDate(selectedDates[0]);
                                                            const normalizedEnd = normalizeToLocalDate(selectedDates[1]);
                                                            updateStatistics(normalizedStart, normalizedEnd);
                                                        }
                                                    }
                                                });

                                                fp.setDate([defaultStartDate, defaultEndDate], true);
                                                updateStatistics(defaultStartDate, defaultEndDate);

                                                $('#refreshBtn').click(function () {
                                                    const selected = fp.selectedDates;
                                                    if (selected.length === 2) {
                                                        const normalizedStart = normalizeToLocalDate(selected[0]);
                                                        const normalizedEnd = normalizeToLocalDate(selected[1]);
                                                        updateStatistics(normalizedStart, normalizedEnd);
                                                    } else {
                                                        updateStatistics(defaultStartDate, defaultEndDate);
                                                    }
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                               Swal.fire(
                                                'Error',
                                                xhr.responseJSON?.error || 'An error occurred while retrieving statistics.',
                                                'error'
                                            );
                                                alert("Không thể lấy cấu hình ngày");
                                            }
                                        });
                                    });
                                </script>




                                <div class="row">


                                    <div class="col-xl-3 col-md-6">
                                        <!-- card -->
                                        <div class="card card-animate">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center">
                                                    <div class="flex-grow-1 overflow-hidden">
                                                        <p
                                                            class="text-uppercase fw-medium text-muted text-truncate mb-0">
                                                            Totals Order</p>
                                                    </div>
                                                    <div class="flex-shrink-0">
                                                       @*  <h5 class="text-danger fs-14 mb-0">
                                                            <i class="ri-arrow-right-down-line fs-13 align-middle"></i>
                                                            -3.57 %
                                                        </h5> *@
                                                    </div>
                                                </div>
                                                <div class="d-flex align-items-end justify-content-between mt-4">
                                                    <div>
                                                        <h4 class="fs-22 fw-semibold ff-secondary mb-4"><span class="total-order">0</span></h4>
                                                        <a href="#" class="text-decoration-underline">View all
                                                            orders</a>
                                                    </div>
                                                    <div class="avatar-sm flex-shrink-0">
                                                        <span class="avatar-title bg-info-subtle rounded fs-3">
                                                            <i class="bx bx-shopping-bag text-info"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div><!-- end card body -->
                                        </div><!-- end card -->
                                    </div><!-- end col -->
                                    <div class="col-xl-3 col-md-6">
                                        <!-- card -->
                                        <div class="card card-animate">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center">
                                                    <div class="flex-grow-1 overflow-hidden">
                                                        <p
                                                            class="text-uppercase fw-medium text-muted text-truncate mb-0">
                                                            Total Earnings</p>
                                                    </div>
                                                    <div class="flex-shrink-0">
                                                       @*  <h5 class="text-success fs-14 mb-0">
                                                            <i class="ri-arrow-right-up-line fs-13 align-middle"></i>
                                                            +16.24 %
                                                        </h5> *@
                                                    </div>
                                                </div>
                                                <div class="d-flex align-items-end justify-content-between mt-4">
                                                    <div>
                                                        <h4 class="fs-22 fw-semibold ff-secondary mb-4">
                                                            <span class="total-earning">0₫</span>
                                                        </h4>
                                                        <a href="#" class="text-decoration-underline">View net
                                                            earnings</a>
                                                    </div>
                                                    <div class="avatar-sm flex-shrink-0">
                                                        <span class="avatar-title bg-success-subtle rounded fs-3">
                                                            <i class="bx bx-dollar-circle text-success"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div><!-- end card body -->
                                        </div>
                                    </div>
                                    <div class="col-xl-3 col-md-6">
                                        <!-- card -->
                                        <div class="card card-animate">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center">
                                                    <div class="flex-grow-1 overflow-hidden">
                                                        <p
                                                            class="text-uppercase fw-medium text-muted text-truncate mb-0">
                                                            Pending Balance</p>
                                                    </div>
                                                    <div class="flex-shrink-0">
                                                       @*  <h5 class="text-success fs-14 mb-0">
                                                            <i class="ri-arrow-right-up-line fs-13 align-middle"></i>
                                                            +16.24 %
                                                        </h5> *@
                                                    </div>
                                                </div>
                                                <div class="d-flex align-items-end justify-content-between mt-4">
                                                    <div>
                                                        <h4 class="fs-22 fw-semibold ff-secondary mb-4">
                                                            <span class="pending-balance">0₫</span>
                                                        </h4>
                                                        <a href="#" class="text-decoration-underline">View net
                                                            earnings</a>
                                                    </div>
                                                    <div class="avatar-sm flex-shrink-0">
                                                        <span class="avatar-title bg-success-subtle rounded fs-3">
                                                            <i class="bx bx-dollar-circle text-success"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div><!-- end card body -->
                                        </div>
                                    </div>
                                    <div class="col-xl-3 col-md-6">
                                        <!-- card -->
                                        <div class="card card-animate">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center">
                                                    <div class="flex-grow-1 overflow-hidden">
                                                        <p
                                                            class="text-uppercase fw-medium text-muted text-truncate mb-0">
                                                            Cancellation Rate</p>
                                                    </div>
                                                    <div class="flex-shrink-0">
                                                        @* <h5 class="text-danger fs-14 mb-0">
                                                            <i class="ri-arrow-up-s-line fs-13 align-middle"></i>
                                                            +1.12%
                                                        </h5> *@
                                                    </div>
                                                </div>
                                                <div class="d-flex align-items-end justify-content-between mt-4">
                                                    <div>
                                                        <h4 class="fs-22 fw-semibold ff-secondary mb-4">
                                                            <span class="cancel-rate-value">0%</span>
                                                        </h4>
                                                        <a href="#" class="text-decoration-underline">View cancelled
                                                            orders</a>
                                                    </div>
                                                    <div class="avatar-sm flex-shrink-0">
                                                        <span class="avatar-title bg-danger-subtle rounded fs-3">
                                                            <i class="bx bx-x-circle text-danger"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div><!-- end card body -->
                                        </div><!-- end card -->
                                    </div><!-- end col -->

                                </div> <!-- end row-->

                                <div class="row">
                                    <div class="col-xl-12">
                                        <div class="card">
                                            <div class="card-header border-0 align-items-center d-flex">
                                                <h4 class="card-title mb-0 flex-grow-1">Revenue by month</h4>
                                                <div>
                                                    <input type="text" id="monthPicker"
                                                        class="form-control form-control-sm" placeholder="Select month"
                                                        style="max-width: 200px;" />

                                                </div>


                                            </div><!-- end card header -->
                                            <script>
                                                document.addEventListener("DOMContentLoaded", function () {
                                                    flatpickr("#monthPicker", {
                                                        dateFormat: "Y-m", // giá trị dùng để gửi server
                                                        defaultDate: new Date(), // 👈 tháng hiện tại
                                                        plugins: [
                                                            new monthSelectPlugin({
                                                                shorthand: true,         // hiển thị ngắn (Jan, Feb...)
                                                                dateFormat: "Y-m",       // giá trị trong input
                                                                altFormat: "F Y"         // hiển thị đẹp cho người dùng
                                                            })
                                                        ]
                                                    });
                                                });
                                            </script>


                                            <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

                                            <!-- Flatpickr monthSelect plugin -->
                                            <link
                                                href="https://cdn.jsdelivr.net/npm/flatpickr/dist/plugins/monthSelect/style.css"
                                                rel="stylesheet">
                                            <script
                                                src="https://cdn.jsdelivr.net/npm/flatpickr/dist/plugins/monthSelect/index.js"></script>

                                            <div class="card-header p-0 border-0 bg-light-subtle">
                                                <div class="row g-0 text-center">
                                                    <div class="col-6 col-sm-3">
                                                        <div class="p-3 border border-dashed border-start-0">
                                                            <h5 class="mb-1">
                                                                <span class="loading-spinner spinner-border spinner-border-sm" role="status"></span>
                                                                <span class="counter-value" id="ordersCounter"></span>
                                                            </h5>
                                                            <p class="text-muted mb-0">Orders</p>
                                                        </div>
                                                    </div>
                                                    <div class="col-6 col-sm-3">
                                                        <div class="p-3 border border-dashed border-start-0">
                                                            <h5 class="mb-1">
                                                                <span class="loading-spinner spinner-border spinner-border-sm" role="status"></span>
                                                                <span class="counter-value" id="earningsCounter"></span>
                                                            </h5>
                                                            <p class="text-muted mb-0">Earnings</p>
                                                        </div>
                                                    </div>
                                                    <div class="col-6 col-sm-3">
                                                        <div class="p-3 border border-dashed border-start-0">
                                                            <h5 class="mb-1">
                                                                <span class="loading-spinner spinner-border spinner-border-sm" role="status"></span>
                                                                <span class="counter-value" id="refundsCounter"></span>
                                                            </h5>
                                                            <p class="text-muted mb-0">Refunds</p>
                                                        </div>
                                                    </div>
                                                    <div class="col-6 col-sm-3">
                                                        <div class="p-3 border border-dashed border-start-0 border-end-0">
                                                            <h5 class="mb-1 text-success">
                                                                <span class="loading-spinner spinner-border spinner-border-sm" role="status"></span>
                                                                <span class="counter-value" id="newCustomersCounter"></span>
                                                            </h5>
                                                            <p class="text-muted mb-0">New Customer</p>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div><!-- end card header -->

                                            <div class="card-body p-0 pb-2">
                                                <div class="w-100">
                                                    <div id="customer_charts"
                                                         data-colors='["--vz-primary", "--vz-success", "--vz-danger", "--vz-warning"]'
                                                        data-colors-minimal='["--vz-light", "--vz-primary", "--vz-info"]'
                                                        data-colors-saas='["--vz-success", "--vz-info", "--vz-danger"]'
                                                        data-colors-modern='["--vz-warning", "--vz-primary", "--vz-success"]'
                                                        data-colors-interactive='["--vz-info", "--vz-primary", "--vz-danger"]'
                                                        data-colors-creative='["--vz-warning", "--vz-primary", "--vz-danger"]'
                                                        data-colors-corporate='["--vz-light", "--vz-primary", "--vz-secondary"]'
                                                        data-colors-galaxy='["--vz-secondary", "--vz-primary", "--vz-primary-rgb, 0.50"]'
                                                        data-colors-classic='["--vz-light", "--vz-primary", "--vz-secondary"]'
                                                        data-colors-vintage='["--vz-success", "--vz-primary", "--vz-secondary"]'
                                                        class="apex-charts" dir="ltr"></div>
                                                </div>
                                            </div><!-- end card body -->
                                        </div><!-- end card -->
                                    </div>

                            @*         <div class="col-xl-4">
                                        <!-- card -->
                                        <div class="card card-height-100">
                                            <div class="card-header align-items-center d-flex">
                                                <h4 class="card-title mb-0 flex-grow-1">Totals Product Orders</h4>
                                                <div class="flex-shrink-0">
                                                    <button type="button"
                                                        class="btn btn-soft-primary material-shadow-none btn-sm">
                                                        Export Report
                                                    </button>
                                                </div>
                                            </div><!-- end card header -->

                                            <!-- card body -->
                                            <div class="card-body">

                                                <div>
                                                    <canvas id="doughnut" class="chartjs-chart"
                                                        data-colors='["--vz-primary", "--vz-light"]'></canvas>
                                                </div>

                                                <!-- <div class="px-2 py-2 mt-1">
                                                    <p class="mb-1">Canada <span class="float-end">75%</span></p>
                                                    <div class="progress mt-2" style="height: 6px;">
                                                        <div class="progress-bar progress-bar-striped bg-primary"
                                                            role="progressbar" style="width: 75%" aria-valuenow="75"
                                                            aria-valuemin="0" aria-valuemax="75"></div>
                                                    </div>

                                                    <p class="mt-3 mb-1">Greenland <span class="float-end">47%</span>
                                                    </p>
                                                    <div class="progress mt-2" style="height: 6px;">
                                                        <div class="progress-bar progress-bar-striped bg-primary"
                                                            role="progressbar" style="width: 47%" aria-valuenow="47"
                                                            aria-valuemin="0" aria-valuemax="47"></div>
                                                    </div>

                                                    <p class="mt-3 mb-1">Russia <span class="float-end">82%</span></p>
                                                    <div class="progress mt-2" style="height: 6px;">
                                                        <div class="progress-bar progress-bar-striped bg-primary"
                                                            role="progressbar" style="width: 82%" aria-valuenow="82"
                                                            aria-valuemin="0" aria-valuemax="82"></div>
                                                    </div>
                                                </div> -->
                                            </div>
                                            <!-- end card body -->
                                        </div>
                                        <!-- end card -->
                                    </div> *@
                                    <!-- end col -->
                                </div>

                                <div class="row">
                                    <!-- Best Selling Products -->
                                    <div class="col-xl-6">
                                        <div class="card">
                                            <div class="card-header d-flex align-items-center justify-content-between">
                                                <h4 class="card-title mb-0">Best Selling Products</h4>
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                            type="button" id="productsFilter" data-bs-toggle="dropdown">
                                                        <span class="fw-semibold text-uppercase fs-12">Sort by: </span>
                                                        <span class="text-muted" id="productsFilterText">Today</span>
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end filter-dropdown">
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="today">Today</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="yesterday">Yesterday</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="last7days">Last 7 Days</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="last30days">Last 30 Days</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="thismonth">This Month</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="lastmonth">Last Month</a>
                                                        </li>
                                                         <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="alltime">All Time</a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="card-body">
                                                <div class="search-box">
                                                    <i class="fas fa-search"></i>
                                                    <input type="text" class="form-control" id="productSearch"
                                                           placeholder="Search products...">
                                                </div>
                                                <div style="position: relative;">
                                                    <div class="table-responsive">
                                                        <table class="table table-hover table-centered align-middle table-nowrap mb-0"
                                                               id="productsTable">
                                                            <tbody>
                                                                <!-- Products will be loaded here -->
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                    <div id="productsLoading" class="loading-overlay"
                                                         style="display: none;">
                                                        <div class="text-center">
                                                            <div class="spinner-border text-primary" role="status">
                                                                <span class="visually-hidden">Loading...</span>
                                                            </div>
                                                            <div class="mt-2">Loading products...</div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Products Pagination -->
                                                <div class="align-items-center mt-4 pt-2 justify-content-between row text-center text-sm-start"
                                                     id="productsPagination">
                                                    <div class="col-sm">
                                                        <div class="text-muted">
                                                            Showing <span class="fw-semibold"
                                                                          id="productsShowingStart">0</span>-<span class="fw-semibold" id="productsShowingEnd">0</span> of
                                                            <span class="fw-semibold" id="productsTotal">0</span>
                                                            Results
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-auto mt-3 mt-sm-0">
                                                        <ul class="pagination pagination-separated pagination-sm mb-0 justify-content-center"
                                                            id="productsPaginationList">
                                                            <!-- Pagination will be rendered here -->
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Top Customers -->
                                    <div class="col-xl-6">
                                        <div class="card">
                                            <div class="card-header d-flex align-items-center justify-content-between">
                                                <h4 class="card-title mb-0">Top Customers</h4>
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                            type="button" id="customersFilter" data-bs-toggle="dropdown">
                                                        <span class="fw-semibold text-uppercase fs-12">Sort by: </span>
                                                        <span class="text-muted" id="customersFilterText">Today</span>
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end filter-dropdown">
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="today">Today</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="yesterday">Yesterday</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="last7days">Last 7 Days</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="last30days">Last 30 Days</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="thismonth">This Month</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="lastmonth">Last Month</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#"
                                                               data-period="alltime">All Time</a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="card-body">
                                                <div class="search-box">
                                                    <i class="fas fa-search"></i>
                                                    <input type="text" class="form-control" id="customerSearch"
                                                           placeholder="Search customers...">
                                                </div>
                                                <div style="position: relative;">
                                                    <div class="table-responsive">
                                                        <table class="table table-centered table-hover align-middle table-nowrap mb-0"
                                                               id="customersTable">
                                                            <tbody>
                                                                <!-- Customers will be loaded here -->
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                    <div id="customersLoading" class="loading-overlay"
                                                         style="display: none;">
                                                        <div class="text-center">
                                                            <div class="spinner-border text-primary" role="status">
                                                                <span class="visually-hidden">Loading...</span>
                                                            </div>
                                                            <div class="mt-2">Loading customers...</div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Customers Pagination -->
                                                <div class="align-items-center mt-4 pt-2 justify-content-between row text-center text-sm-start"
                                                     id="customersPagination">
                                                    <div class="col-sm">
                                                        <div class="text-muted">
                                                            Showing <span class="fw-semibold"
                                                                          id="customersShowingStart">0</span>-<span class="fw-semibold" id="customersShowingEnd">0</span> of
                                                            <span class="fw-semibold" id="customersTotal">0</span>
                                                            Results
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-auto mt-3 mt-sm-0">
                                                        <ul class="pagination pagination-separated pagination-sm mb-0 justify-content-center"
                                                            id="customersPaginationList">
                                                            <!-- Pagination will be rendered here -->
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                     
                                <script>
                                    // Pagination state
                                    let productsCurrentPage = 1;
                                    let customersCurrentPage = 1;
                                    const itemsPerPage = 5;
                                    let allProducts = [];
                                    let allCustomers = [];
                                    let filteredProducts = [];
                                    let filteredCustomers = [];

                                    // AJAX API functions - Updated to call backend
                                    async function fetchProducts(period = 'today', search = '') {
                                        try {
                                            const response = await fetch(`/Seller/GetProducts?period=${encodeURIComponent(period)}&search=${encodeURIComponent(search)}`, {
                                                method: 'GET',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                    'X-Requested-With': 'XMLHttpRequest'
                                                }
                                            });

                                            if (!response.ok) {
                                                throw new Error(`HTTP error! status: ${response.status}`);
                                            }

                                            const data = await response.json();

                                            // Check if there's an error in the response
                                            if (data.error) {
                                                throw new Error(data.error);
                                            }

                                            return data;
                                        } catch (error) {
                                            console.error('Error fetching products:', error);
                                            throw error;
                                        }
                                    }

                                    async function fetchCustomers(period = 'today', search = '') {
                                        try {
                                            const response = await fetch(`/Seller/GetCustomers?period=${encodeURIComponent(period)}&search=${encodeURIComponent(search)}`, {
                                                method: 'GET',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                    'X-Requested-With': 'XMLHttpRequest'
                                                }
                                            });

                                            if (!response.ok) {
                                                throw new Error(`HTTP error! status: ${response.status}`);
                                            }

                                            const data = await response.json();

                                            // Check if there's an error in the response
                                            if (data.error) {
                                                throw new Error(data.error);
                                            }

                                            return data;
                                        } catch (error) {
                                            console.error('Error fetching customers:', error);
                                            throw error;
                                        }
                                    }

                                    function renderProducts(products, page = 1) {
                                        const tbody = document.querySelector('#productsTable tbody');
                                        const startIndex = (page - 1) * itemsPerPage;
                                        const endIndex = startIndex + itemsPerPage;
                                        const paginatedProducts = products.slice(startIndex, endIndex);

                                        if (paginatedProducts.length === 0) {
                                            tbody.innerHTML = `
                                                <tr>
                                                    <td colspan="5">
                                                        <div class="no-data">
                                                            <i class="fas fa-search fa-3x mb-3 text-muted"></i>
                                                            <h5>No products found</h5>
                                                            <p class="text-muted">Try adjusting your search terms or filter criteria.</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            `;
                                            document.getElementById('productsPagination').style.display = 'none';
                                            return;
                                        }

                                        tbody.innerHTML = paginatedProducts.map(product => `
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="avatar-sm bg-light rounded p-1 me-2">
                                                            <div style="font-size: 18px;">${product.image || '📦'}</div>
                                                        </div>
                                                        <div>
                                                            <h5 class="fs-14 my-1">
                                                                <a href="/UpdateProductType?variantId=${product.id}" target="_blank" class="text-reset">${product.name}</a>
                                                            </h5>
                                                            <span class="text-muted">${product.date}</span>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <h5 class="fs-14 my-1 fw-normal">$${parseFloat(product.price).toFixed(2)}</h5>
                                                    <span class="text-muted">Price</span>
                                                </td>
                                                <td>
                                                    <h5 class="fs-14 my-1 fw-normal">${product.orders}</h5>
                                                    <span class="text-muted">Orders</span>
                                                </td>
                                                <td>
                                                    ${product.stock === 0 ?
                                                '<h5 class="fs-14 my-1 fw-normal"><span class="badge bg-danger-subtle text-danger">Out of stock</span></h5>' :
                                                `<h5 class="fs-14 my-1 fw-normal">${product.stock}</h5>`
                                            }
                                                    <span class="text-muted">Stock</span>
                                                </td>
                                                <td>
                                                    <h5 class="fs-14 my-1 fw-normal">$${parseInt(product.totalSell).toLocaleString()}</h5>
                                                    <span class="text-muted">Amount</span>
                                                </td>
                                            </tr>
                                        `).join('');

                                        renderProductsPagination(products.length, page);
                                    }

                                    function renderCustomers(customers, page = 1) {
                                        const tbody = document.querySelector('#customersTable tbody');
                                        const startIndex = (page - 1) * itemsPerPage;
                                        const endIndex = startIndex + itemsPerPage;
                                        const paginatedCustomers = customers.slice(startIndex, endIndex);

                                        if (paginatedCustomers.length === 0) {
                                            tbody.innerHTML = `
                                                <tr>
                                                    <td colspan="5">
                                                        <div class="no-data">
                                                            <i class="fas fa-users fa-3x mb-3 text-muted"></i>
                                                            <h5>No customers found</h5>
                                                            <p class="text-muted">Try adjusting your search terms or filter criteria.</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            `;
                                            document.getElementById('customersPagination').style.display = 'none';
                                            return;
                                        }

                                        tbody.innerHTML = paginatedCustomers.map(customer => `
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="flex-shrink-0 me-2">
                                                                                                <div class="avatar-sm p-2 wraphe" style="background: linear-gradient(45deg, #007bff, #0056b3); color: white; border-radius: 50%;">
                                                                ${customer.userName}
                                                            </div>
                                                        </div>
                                                        <div>
                                                            <h5 class="fs-14 my-1 fw-medium">
                                                                                                                                                                            <a href="#" class="text-reset wraphe">${customer.userName}</a>
                                                            </h5>
                                                            <span class="text-muted wraphe">${customer.rolebuy}</span>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <p class="mb-0 wraphe">${customer.phone}</p>
                                                    <span class="text-muted">Phone</span>
                                                </td>
                                                <td>
                                                    <p class="mb-0">${parseInt(customer.stock).toLocaleString()}</p>
                                                    <span class="text-muted">Order</span>
                                                </td>
                                                <td>
                                                    <p class="mb-0">$${parseInt(customer.amount).toLocaleString()}</p>
                                                    <span class="text-muted">Amounts</span>
                                                </td>
                                                <td>
                                                    <h5 class="fs-14 mb-0 ${customer.growth >= 0 ? 'text-success' : 'text-danger'}">
                                                        ${customer.growth}%<i class="fas ${customer.growth >= 0 ? 'fa-arrow-up' : 'fa-arrow-down'} fs-6 align-middle ms-2"></i>
                                                    </h5>
                                                </td>
                                            </tr>
                                        `).join('');

                                        renderCustomersPagination(customers.length, page);
                                    }

                                    function renderProductsPagination(totalItems, currentPage) {
                                        const totalPages = Math.ceil(totalItems / itemsPerPage);
                                        const startItem = (currentPage - 1) * itemsPerPage + 1;
                                        const endItem = Math.min(currentPage * itemsPerPage, totalItems);

                                        document.getElementById('productsShowingStart').textContent = startItem;
                                        document.getElementById('productsShowingEnd').textContent = endItem;
                                        document.getElementById('productsTotal').textContent = totalItems;

                                        if (totalPages <= 1) {
                                            document.getElementById('productsPagination').style.display = 'none';
                                            return;
                                        }

                                        document.getElementById('productsPagination').style.display = 'flex';

                                        const paginationList = document.getElementById('productsPaginationList');
                                        let paginationHTML = '';

                                        // Previous button
                                        paginationHTML += `
                                            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                                <a href="#" class="page-link" data-page="${currentPage - 1}" data-type="products">
                                                    ←
                                                </a>
                                            </li>
                                        `;

                                        // Calculate page range to show
                                        let startPage = Math.max(1, currentPage - 2);
                                        let endPage = Math.min(totalPages, startPage + 4);

                                        if (endPage - startPage < 4) {
                                            startPage = Math.max(1, endPage - 4);
                                        }

                                        // First page and ellipsis
                                        if (startPage > 1) {
                                            paginationHTML += `
                                                <li class="page-item">
                                                    <a href="#" class="page-link" data-page="1" data-type="products">1</a>
                                                </li>
                                            `;
                                            if (startPage > 2) {
                                                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                                            }
                                        }

                                        // Page numbers
                                        for (let i = startPage; i <= endPage; i++) {
                                            paginationHTML += `
                                                <li class="page-item ${i === currentPage ? 'active' : ''}">
                                                    <a href="#" class="page-link" data-page="${i}" data-type="products">${i}</a>
                                                </li>
                                            `;
                                        }

                                        // Last page and ellipsis
                                        if (endPage < totalPages) {
                                            if (endPage < totalPages - 1) {
                                                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                                            }
                                            paginationHTML += `
                                                <li class="page-item">
                                                    <a href="#" class="page-link" data-page="${totalPages}" data-type="products">${totalPages}</a>
                                                </li>
                                            `;
                                        }

                                        // Next button
                                        paginationHTML += `
                                            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                                <a href="#" class="page-link" data-page="${currentPage + 1}" data-type="products">
                                                    →
                                                </a>
                                            </li>
                                        `;

                                        paginationList.innerHTML = paginationHTML;
                                    }

                                    function renderCustomersPagination(totalItems, currentPage) {
                                        const totalPages = Math.ceil(totalItems / itemsPerPage);
                                        const startItem = (currentPage - 1) * itemsPerPage + 1;
                                        const endItem = Math.min(currentPage * itemsPerPage, totalItems);

                                        document.getElementById('customersShowingStart').textContent = startItem;
                                        document.getElementById('customersShowingEnd').textContent = endItem;
                                        document.getElementById('customersTotal').textContent = totalItems;

                                        if (totalPages <= 1) {
                                            document.getElementById('customersPagination').style.display = 'none';
                                            return;
                                        }

                                        document.getElementById('customersPagination').style.display = 'flex';

                                        const paginationList = document.getElementById('customersPaginationList');
                                        let paginationHTML = '';

                                        // Previous button
                                        paginationHTML += `
                                            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                                <a href="#" class="page-link" data-page="${currentPage - 1}" data-type="customers">
                                                    ←
                                                </a>
                                            </li>
                                        `;

                                        // Calculate page range to show
                                        let startPage = Math.max(1, currentPage - 2);
                                        let endPage = Math.min(totalPages, startPage + 4);

                                        if (endPage - startPage < 4) {
                                            startPage = Math.max(1, endPage - 4);
                                        }

                                        // First page and ellipsis
                                        if (startPage > 1) {
                                            paginationHTML += `
                                                <li class="page-item">
                                                    <a href="#" class="page-link" data-page="1" data-type="customers">1</a>
                                                </li>
                                            `;
                                            if (startPage > 2) {
                                                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                                            }
                                        }

                                        // Page numbers
                                        for (let i = startPage; i <= endPage; i++) {
                                            paginationHTML += `
                                                <li class="page-item ${i === currentPage ? 'active' : ''}">
                                                    <a href="#" class="page-link" data-page="${i}" data-type="customers">${i}</a>
                                                </li>
                                            `;
                                        }

                                        // Last page and ellipsis
                                        if (endPage < totalPages) {
                                            if (endPage < totalPages - 1) {
                                                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                                            }
                                            paginationHTML += `
                                                <li class="page-item">
                                                    <a href="#" class="page-link" data-page="${totalPages}" data-type="customers">${totalPages}</a>
                                                </li>
                                            `;
                                        }

                                        // Next button
                                        paginationHTML += `
                                            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                                <a href="#" class="page-link" data-page="${currentPage + 1}" data-type="customers">
                                                    →
                                                </a>
                                            </li>
                                        `;

                                        paginationList.innerHTML = paginationHTML;
                                    }

                                    async function loadProducts(period = 'today', search = '', page = 1) {
                                        const loadingEl = document.getElementById('productsLoading');
                                        if (loadingEl) {
                                            loadingEl.style.display = 'flex';
                                        }

                                        try {
                                            allProducts = await fetchProducts(period, search);
                                            filteredProducts = allProducts;
                                            productsCurrentPage = page;
                                            renderProducts(filteredProducts, page);
                                        } catch (error) {
                                            console.error('Error loading products:', error);
                                            document.querySelector('#productsTable tbody').innerHTML = `
                                                <tr>
                                                    <td colspan="5">
                                                        <div class="no-data">
                                                            <i class="fas fa-exclamation-triangle fa-3x mb-3 text-warning"></i>
                                                            <h5>Error loading products</h5>
                                                            <p class="text-muted">Please try again later. ${error.message}</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            `;
                                        } finally {
                                            if (loadingEl) {
                                                loadingEl.style.display = 'none';
                                            }
                                        }
                                    }

                                    async function loadCustomers(period = 'today', search = '', page = 1) {
                                        const loadingEl = document.getElementById('customersLoading');
                                        if (loadingEl) {
                                            loadingEl.style.display = 'flex';
                                        }

                                        try {
                                            allCustomers = await fetchCustomers(period, search);
                                            filteredCustomers = allCustomers;
                                            customersCurrentPage = page;
                                            renderCustomers(filteredCustomers, page);
                                        } catch (error) {
                                            console.error('Error loading customers:', error);
                                            document.querySelector('#customersTable tbody').innerHTML = `
                                                <tr>
                                                    <td colspan="5">
                                                        <div class="no-data">
                                                            <i class="fas fa-exclamation-triangle fa-3x mb-3 text-warning"></i>
                                                            <h5>Error loading customers</h5>
                                                            <p class="text-muted">Please try again later. ${error.message}</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            `;
                                        } finally {
                                            if (loadingEl) {
                                                loadingEl.style.display = 'none';
                                            }
                                        }
                                    }

                                    // Helper function to get current filter period
                                    function getCurrentPeriod(filterTextElement) {
                                        const filterText = filterTextElement.textContent.toLowerCase().trim();
                                        const periodMap = {
                                            'today': 'today',
                                            'yesterday': 'yesterday',
                                            'last 7 days': 'last7days',
                                            'last 30 days': 'last30days',
                                            'this month': 'thismonth',
                                            'last month': 'lastmonth'
                                        };
                                        return periodMap[filterText] || 'today';
                                    }

                                    // Event Listeners
                                    document.addEventListener('DOMContentLoaded', function () {
                                        // Load initial data
                                        loadProducts();
                                        loadCustomers();

                                        // Pagination click handler
                                        document.addEventListener('click', function (e) {
                                            if (e.target.matches('.page-link') || e.target.closest('.page-link')) {
                                                e.preventDefault();

                                                const linkEl = e.target.matches('.page-link') ? e.target : e.target.closest('.page-link');
                                                const page = parseInt(linkEl.dataset.page);
                                                const type = linkEl.dataset.type;

                                                if (isNaN(page) || linkEl.closest('.page-item').classList.contains('disabled')) return;

                                                if (type === 'products') {
                                                    productsCurrentPage = page;
                                                    renderProducts(filteredProducts, page);
                                                } else if (type === 'customers') {
                                                    customersCurrentPage = page;
                                                    renderCustomers(filteredCustomers, page);
                                                }

                                                // Scroll to top of respective table
                                                const tableContainer = type === 'products' ?
                                                    document.querySelector('#productsTable').closest('.card') :
                                                    document.querySelector('#customersTable').closest('.card');
                                                if (tableContainer) {
                                                    tableContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                                }
                                            }
                                        });

                                        // Search functionality with debouncing
                                        let productSearchTimeout;
                                        let customerSearchTimeout;

                                        const productSearchEl = document.getElementById('productSearch');
                                        if (productSearchEl) {
                                            productSearchEl.addEventListener('input', function (e) {
                                                clearTimeout(productSearchTimeout);
                                                const searchValue = e.target.value.trim();

                                                productSearchTimeout = setTimeout(() => {
                                                    const filterTextEl = document.getElementById('productsFilterText');
                                                    const currentPeriod = filterTextEl ? getCurrentPeriod(filterTextEl) : 'today';
                                                    loadProducts(currentPeriod, searchValue, 1);
                                                }, 300);
                                            });
                                        }

                                        const customerSearchEl = document.getElementById('customerSearch');
                                        if (customerSearchEl) {
                                            customerSearchEl.addEventListener('input', function (e) {
                                                clearTimeout(customerSearchTimeout);
                                                const searchValue = e.target.value.trim();

                                                customerSearchTimeout = setTimeout(() => {
                                                    const filterTextEl = document.getElementById('customersFilterText');
                                                    const currentPeriod = filterTextEl ? getCurrentPeriod(filterTextEl) : 'today';
                                                    loadCustomers(currentPeriod, searchValue, 1);
                                                }, 300);
                                            });
                                        }

                                        // Filter functionality for products
                                        document.addEventListener('click', function (e) {
                                            if (e.target.matches('#productsFilter + .dropdown-menu .dropdown-item')) {
                                                e.preventDefault();
                                                const period = e.target.dataset.period;
                                                const periodText = e.target.textContent;
                                                const searchValue = productSearchEl ? productSearchEl.value.trim() : '';

                                                const filterTextEl = document.getElementById('productsFilterText');
                                                if (filterTextEl) {
                                                    filterTextEl.textContent = periodText;
                                                }
                                                loadProducts(period, searchValue, 1);
                                            }
                                        });

                                        // Filter functionality for customers
                                        document.addEventListener('click', function (e) {
                                            if (e.target.matches('#customersFilter + .dropdown-menu .dropdown-item')) {
                                                e.preventDefault();
                                                const period = e.target.dataset.period;
                                                const periodText = e.target.textContent;
                                                const searchValue = customerSearchEl ? customerSearchEl.value.trim() : '';

                                                const filterTextEl = document.getElementById('customersFilterText');
                                                if (filterTextEl) {
                                                    filterTextEl.textContent = periodText;
                                                }
                                                loadCustomers(period, searchValue, 1);
                                            }
                                        });

                                        // Clear search functionality
                                        if (productSearchEl) {
                                            productSearchEl.addEventListener('keydown', function (e) {
                                                if (e.key === 'Escape') {
                                                    e.target.value = '';
                                                    const filterTextEl = document.getElementById('productsFilterText');
                                                    const currentPeriod = filterTextEl ? getCurrentPeriod(filterTextEl) : 'today';
                                                    loadProducts(currentPeriod, '', 1);
                                                }
                                            });
                                        }

                                        if (customerSearchEl) {
                                            customerSearchEl.addEventListener('keydown', function (e) {
                                                if (e.key === 'Escape') {
                                                    e.target.value = '';
                                                    const filterTextEl = document.getElementById('customersFilterText');
                                                    const currentPeriod = filterTextEl ? getCurrentPeriod(filterTextEl) : 'today';
                                                    loadCustomers(currentPeriod, '', 1);
                                                }
                                            });
                                        }
                                    });

                                    // Utility functions
                                    function formatCurrency(amount) {
                                        return new Intl.NumberFormat('en-US', {
                                            style: 'currency',
                                            currency: 'USD'
                                        }).format(amount);
                                    }

                                    function formatNumber(number) {
                                        return new Intl.NumberFormat('en-US').format(number);
                                    }

                                    // Export functions for potential external use
                                    window.dashboardAPI = {
                                        loadProducts,
                                        loadCustomers,
                                        renderProducts,
                                        renderCustomers,
                                        formatCurrency,
                                        formatNumber
                                    };

                                    // Additional utility functions for debouncing
                                    function debounce(func, wait) {
                                        let timeout;
                                        return function executedFunction(...args) {
                                            const later = () => {
                                                clearTimeout(timeout);
                                                func(...args);
                                            };
                                            clearTimeout(timeout);
                                            timeout = setTimeout(later, wait);
                                        };
                                    }

                                    // Enhanced search functionality
                                    function handleAdvancedSearch() {
                                        const productSearchInput = document.getElementById('productSearch');
                                        const customerSearchInput = document.getElementById('customerSearch');

                                        // Add search suggestions
                                        function addSearchSuggestions(inputElement, suggestions) {
                                            const suggestionsList = document.createElement('div');
                                            suggestionsList.className = 'search-suggestions position-absolute w-100 bg-white border rounded shadow-sm';
                                            suggestionsList.style.top = '100%';
                                            suggestionsList.style.zIndex = '1000';
                                            suggestionsList.style.maxHeight = '200px';
                                            suggestionsList.style.overflowY = 'auto';

                                            suggestions.forEach(suggestion => {
                                                const item = document.createElement('div');
                                                item.className = 'px-3 py-2 cursor-pointer';
                                                item.style.cursor = 'pointer';
                                                item.textContent = suggestion;
                                                item.addEventListener('click', () => {
                                                    inputElement.value = suggestion;
                                                    inputElement.dispatchEvent(new Event('input'));
                                                    suggestionsList.remove();
                                                });
                                                item.addEventListener('mouseenter', () => {
                                                    item.style.backgroundColor = '#f8f9fa';
                                                });
                                                item.addEventListener('mouseleave', () => {
                                                    item.style.backgroundColor = 'white';
                                                });
                                                suggestionsList.appendChild(item);
                                            });

                                            // Remove existing suggestions
                                            const existingSuggestions = inputElement.parentElement.querySelector('.search-suggestions');
                                            if (existingSuggestions) {
                                                existingSuggestions.remove();
                                            }

                                            if (suggestions.length > 0) {
                                                inputElement.parentElement.appendChild(suggestionsList);
                                            }
                                        }

                                        // Product search suggestions
                                        productSearchInput.addEventListener('input', debounce((e) => {
                                            const value = e.target.value.toLowerCase();
                                            if (value.length > 1) {
                                                const suggestions = allProducts
                                                    .filter(product => product.name.toLowerCase().includes(value))
                                                    .slice(0, 5)
                                                    .map(product => product.name);
                                                addSearchSuggestions(productSearchInput, suggestions);
                                            }
                                        }, 200));

                                        // Customer search suggestions
                                        customerSearchInput.addEventListener('input', debounce((e) => {
                                            const value = e.target.value.toLowerCase();
                                            if (value.length > 1) {
                                                const suggestions = [
                                                    ...allCustomers.filter(customer => customer.UserName.toLowerCase().includes(value)).slice(0, 3).map(c => c.UserName),
                                                    ...allCustomers.filter(customer => customer.rolebuy.toLowerCase().includes(value)).slice(0, 2).map(c => c.rolebuy)
                                                ];
                                                addSearchSuggestions(customerSearchInput, [...new Set(suggestions)].slice(0, 5));
                                            }
                                        }, 200));

                                        // Hide suggestions when clicking outside
                                        document.addEventListener('click', (e) => {
                                            if (!e.target.closest('.search-box')) {
                                                document.querySelectorAll('.search-suggestions').forEach(el => el.remove());
                                            }
                                        });
                                    }

                                    // Enhanced pagination with keyboard navigation
                                    function addKeyboardNavigation() {
                                        document.addEventListener('keydown', (e) => {
                                            if (e.ctrlKey || e.metaKey) {
                                                switch (e.key) {
                                                    case 'ArrowLeft':
                                                        e.preventDefault();
                                                        // Navigate to previous page of products
                                                        if (productsCurrentPage > 1) {
                                                            productsCurrentPage--;
                                                            renderProducts(filteredProducts, productsCurrentPage);
                                                        }
                                                        break;
                                                    case 'ArrowRight':
                                                        e.preventDefault();
                                                        // Navigate to next page of products
                                                        const maxProductsPage = Math.ceil(filteredProducts.length / itemsPerPage);
                                                        if (productsCurrentPage < maxProductsPage) {
                                                            productsCurrentPage++;
                                                            renderProducts(filteredProducts, productsCurrentPage);
                                                        }
                                                        break;
                                                }
                                            }
                                        });
                                    }

                                    // Export functionality
                                    function exportToCSV(data, filename, type) {
                                        const headers = type === 'products'
                                            ? ['Name', 'Price', 'Orders', 'Stock', 'Total Sales', 'Date']
                                            : ['UserName', 'rolebuy', 'Phone', 'Total Order', 'Amount', 'Growth'];

                                        const csvContent = [
                                            headers.join(','),
                                            ...data.map(item => {
                                                if (type === 'products') {
                                                    return [
                                                        `"${item.name}"`,
                                                        item.price,
                                                        item.orders,
                                                        item.stock,
                                                        item.totalSell,
                                                        `"${item.date}"`
                                                    ].join(',');
                                                } else {
                                                    return [
                                                        `"${item.UserName}"`,
                                                        `"${item.rolebuy}"`,
                                                        `"${item.Phone}"`,
                                                        item.stock,
                                                        item.amount,
                                                        `${item.growth}%`
                                                    ].join(',');
                                                }
                                            })
                                        ].join('\n');

                                        const blob = new Blob([csvContent], { type: 'text/csv' });
                                        const url = window.URL.createObjectURL(blob);
                                        const link = document.createElement('a');
                                        link.href = url;
                                        link.download = filename;
                                        document.body.appendChild(link);
                                        link.click();
                                        document.body.removeChild(link);
                                        window.URL.revokeObjectURL(url);
                                    }

                                    // Add export buttons
                                    function addExportButtons() {
                                        const productsHeader = document.querySelector('#productsTable').closest('.card').querySelector('.card-header');
                                        const customersHeader = document.querySelector('#customersTable').closest('.card').querySelector('.card-header');

                                        // Products export button
                                        const productsExportBtn = document.createElement('button');
                                        productsExportBtn.className = 'btn btn-sm btn-outline-primary me-2';
                                        productsExportBtn.innerHTML = '<i class="fas fa-download me-1"></i>Export';
                                        productsExportBtn.addEventListener('click', () => {
                                            exportToCSV(filteredProducts, 'products.csv', 'products');
                                        });

                                        // Customers export button
                                        const customersExportBtn = document.createElement('button');
                                        customersExportBtn.className = 'btn btn-sm btn-outline-primary me-2';
                                        customersExportBtn.innerHTML = '<i class="fas fa-download me-1"></i>Export';
                                        customersExportBtn.addEventListener('click', () => {
                                            exportToCSV(filteredCustomers, 'customers.csv', 'customers');
                                        });

                                        productsHeader.insertBefore(productsExportBtn, productsHeader.querySelector('.dropdown'));
                                        customersHeader.insertBefore(customersExportBtn, customersHeader.querySelector('.dropdown'));
                                    }

                                    // Enhanced table interactions
                                    function addTableInteractions() {
                                        // Add sorting functionality
                                        function addSortingToTables() {
                                            // This would typically involve adding clickable headers
                                            // For now, we'll add a simple sort indicator
                                            const tables = document.querySelectorAll('table');
                                            tables.forEach(table => {
                                                table.addEventListener('click', (e) => {
                                                    if (e.target.tagName === 'TH') {
                                                        // Visual feedback for sorting
                                                        e.target.style.cursor = 'pointer';
                                                        console.log('Sorting by:', e.target.textContent);
                                                    }
                                                });
                                            });
                                        }

                                        // Add row selection
                                        function addRowSelection() {
                                            document.addEventListener('click', (e) => {
                                                if (e.target.closest('tbody tr')) {
                                                    const row = e.target.closest('tbody tr');
                                                    const isSelected = row.classList.contains('table-active');

                                                    // Clear other selections in the same table
                                                    const table = row.closest('table');
                                                    table.querySelectorAll('tbody tr').forEach(r => r.classList.remove('table-active'));

                                                    if (!isSelected) {
                                                        row.classList.add('table-active');
                                                    }
                                                }
                                            });
                                        }

                                        addSortingToTables();
                                        addRowSelection();
                                    }

                                    // Performance monitoring
                                    function addPerformanceMonitoring() {
                                        const performanceData = {
                                            loadTimes: [],
                                            searchTimes: [],
                                            renderTimes: []
                                        };

                                        // Monitor load times
                                        const originalLoadProducts = window.dashboardAPI.loadProducts;
                                        const originalLoadCustomers = window.dashboardAPI.loadCustomers;

                                        window.dashboardAPI.loadProducts = async function (...args) {
                                            const startTime = performance.now();
                                            const result = await originalLoadProducts.apply(this, args);
                                            const endTime = performance.now();
                                            performanceData.loadTimes.push(endTime - startTime);
                                            return result;
                                        };

                                        window.dashboardAPI.loadCustomers = async function (...args) {
                                            const startTime = performance.now();
                                            const result = await originalLoadCustomers.apply(this, args);
                                            const endTime = performance.now();
                                            performanceData.loadTimes.push(endTime - startTime);
                                            return result;
                                        };

                                        // Log performance stats periodically
                                        setInterval(() => {
                                            if (performanceData.loadTimes.length > 0) {
                                                const avgLoadTime = performanceData.loadTimes.reduce((a, b) => a + b, 0) / performanceData.loadTimes.length;
                                                console.log(`Average load time: ${avgLoadTime.toFixed(2)}ms`);
                                            }
                                        }, 30000); // Every 30 seconds
                                    }

                                    // Responsive table enhancements
                                    function addResponsiveFeatures() {
                                        function checkViewport() {
                                            const isMobile = window.innerWidth < 768;
                                            const tables = document.querySelectorAll('.table-responsive');

                                            tables.forEach(table => {
                                                if (isMobile) {
                                                    table.classList.add('table-responsive-sm');
                                                    // Hide less important columns on mobile
                                                    const lessImportantCells = table.querySelectorAll('td:nth-child(3), th:nth-child(3)');
                                                    lessImportantCells.forEach(cell => {
                                                        cell.style.display = window.innerWidth < 576 ? 'none' : 'table-cell';
                                                    });
                                                } else {
                                                    table.classList.remove('table-responsive-sm');
                                                    const hiddenCells = table.querySelectorAll('td, th');
                                                    hiddenCells.forEach(cell => {
                                                        cell.style.display = 'table-cell';
                                                    });
                                                }
                                            });
                                        }

                                        window.addEventListener('resize', debounce(checkViewport, 250));
                                        checkViewport(); // Initial check
                                    }

                                    // Initialize all enhancements
                                    function initializeEnhancements() {
                                        handleAdvancedSearch();
                                        addKeyboardNavigation();
                                        addExportButtons();
                                        addTableInteractions();
                                        addPerformanceMonitoring();
                                        addResponsiveFeatures();

                                        console.log('Dashboard enhancements initialized');
                                    }

                                    // Auto-refresh functionality
                                    function addAutoRefresh() {
                                        let refreshInterval;

                                        function startAutoRefresh(intervalMinutes = 5) {
                                            if (refreshInterval) {
                                                clearInterval(refreshInterval);
                                            }

                                            refreshInterval = setInterval(() => {
                                                const productsFilter = document.getElementById('productsFilterText').textContent.toLowerCase().replace(/\s+/g, '');
                                                const customersFilter = document.getElementById('customersFilterText').textContent.toLowerCase().replace(/\s+/g, '');
                                                const productSearch = document.getElementById('productSearch').value.trim();
                                                const customerSearch = document.getElementById('customerSearch').value.trim();

                                                // Refresh data silently
                                                Promise.all([
                                                    loadProducts(productsFilter, productSearch, productsCurrentPage),
                                                    loadCustomers(customersFilter, customerSearch, customersCurrentPage)
                                                ]).then(() => {
                                                    console.log('Data refreshed automatically');
                                                });
                                            }, intervalMinutes * 60 * 1000);
                                        }

                                        function stopAutoRefresh() {
                                            if (refreshInterval) {
                                                clearInterval(refreshInterval);
                                                refreshInterval = null;
                                            }
                                        }

                                        // Add to dashboard API
                                        window.dashboardAPI.startAutoRefresh = startAutoRefresh;
                                        window.dashboardAPI.stopAutoRefresh = stopAutoRefresh;

                                        // Start auto-refresh by default
                                        startAutoRefresh();
                                    }

                                    // Theme management
                                    function addThemeSupport() {
                                        const themes = {
                                            light: {
                                                '--bs-body-bg': '#ffffff',
                                                '--bs-body-color': '#212529',
                                                '--bs-card-bg': '#ffffff'
                                            },
                                            dark: {
                                                '--bs-body-bg': '#1a1a1a',
                                                '--bs-body-color': '#ffffff',
                                                '--bs-card-bg': '#2d2d2d'
                                            }
                                        };

                                        function applyTheme(themeName) {
                                            const theme = themes[themeName];
                                            if (theme) {
                                                Object.entries(theme).forEach(([property, value]) => {
                                                    document.documentElement.style.setProperty(property, value);
                                                });
                                                localStorage.setItem('dashboard-theme', themeName);
                                            }
                                        }

                                        function addThemeToggle() {
                                            const themeToggle = document.createElement('button');
                                            themeToggle.className = 'btn btn-sm btn-outline-secondary position-fixed';
                                            themeToggle.style.top = '20px';
                                            themeToggle.style.right = '20px';
                                            themeToggle.style.zIndex = '1050';
                                            themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
                                            themeToggle.title = 'Toggle theme';

                                            let currentTheme = localStorage.getItem('dashboard-theme') || 'light';
                                            applyTheme(currentTheme);

                                            themeToggle.addEventListener('click', () => {
                                                currentTheme = currentTheme === 'light' ? 'dark' : 'light';
                                                applyTheme(currentTheme);
                                                themeToggle.innerHTML = currentTheme === 'light' ? '<i class="fas fa-moon"></i>' : '<i class="fas fa-sun"></i>';
                                            });

                                            document.body.appendChild(themeToggle);
                                        }

                                        addThemeToggle();
                                    }

                                    // Initialize everything when DOM is loaded
                                    document.addEventListener('DOMContentLoaded', function () {
                                        // Wait a bit for the main dashboard to initialize
                                        setTimeout(() => {
                                            initializeEnhancements();
                                            addAutoRefresh();
                                            addThemeSupport();
                                        }, 1000);
                                    });

                                    // Cleanup function
                                    window.addEventListener('beforeunload', () => {
                                        if (window.dashboardAPI && window.dashboardAPI.stopAutoRefresh) {
                                            window.dashboardAPI.stopAutoRefresh();
                                        }
                                    });
                                </script>

                                <div class="row">
                                    <div class="col-xl-4">
                                        <div class="card card-height-100">
                                            <div class="card-header align-items-center d-flex">
                                                <h4 class="card-title mb-0 flex-grow-1">Product Statistics</h4>
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="chartFilter"
                                                            data-bs-toggle="dropdown">
                                                        <span class="fw-semibold text-uppercase fs-12">Sort by: </span>
                                                        <span class="text-muted" id="chartFilterText">Today</span>
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end filter-dropdown">
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="today">Today</a></li>
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="yesterday">Yesterday</a></li>
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="last7days">Last 7 Days</a></li>
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="last30days">Last 30 Days</a></li>
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="thismonth">This Month</a></li>
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="lastmonth">Last Month</a></li>
                                                        <li><a class="dropdown-item chart-filter" href="#" data-period="alltime">All time</a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <div class="card-body">
                                                <div class="chart-container">
                                                    <div class="loading-spinner" id="chartLoading">
                                                        <i class="fas fa-circle-notch fa-spin-custom"></i>
                                                        <div>Loading chart data...</div>
                                                    </div>
                                                    <div class="chart-loading-overlay" id="chartLoadingOverlay">
                                                        <div class="text-center">
                                                            <i class="fas fa-sync-alt fa-spin-custom text-primary" style="font-size: 2rem;"></i>
                                                            <div class="mt-2 text-muted">Updating...</div>
                                                        </div>
                                                    </div>
                                                    <div class="error-message" id="chartError"></div>
                                                    <div id="product-stats-chart" class="apex-charts" dir="ltr"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Table Section -->
                                    <div class="col-xl-8">
                                        <div class="card">
                                            <div class="card-header align-items-center d-flex">
                                                <h4 class="card-title mb-0 flex-grow-1">Recent Orders</h4>
                                                <div class="d-flex gap-2">
                                                    <!-- Search Box -->
                                                    <div class="search-box">
                                                        <i class="fas fa-search search-icon"></i>
                                                        <input type="text" class="form-control form-control-sm" id="orderSearch"
                                                               placeholder="Search orders..." style="width: 200px;">
                                                    </div>

                                                    <!-- Filter Dropdown -->
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="tableFilter"
                                                                data-bs-toggle="dropdown">
                                                            <span class="fw-semibold text-uppercase fs-12">Sort by: </span>
                                                            <span class="text-muted" id="tableFilterText">Today</span>
                                                        </button>
                                                        <ul class="dropdown-menu dropdown-menu-end filter-dropdown">
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="today">Today</a></li>
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="yesterday">Yesterday</a></li>
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="last7days">Last 7 Days</a></li>
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="last30days">Last 30 Days</a></li>
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="thismonth">This Month</a></li>
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="lastmonth">Last Month</a></li>
                                                            <li><a class="dropdown-item table-filter" href="#" data-period="alltime">All time</a></li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card-body">
                                                <div class="loading-spinner" id="tableLoading">
                                                    <i class="fas fa-spinner fa-spin-custom"></i>
                                                    <div>Loading orders...</div>
                                                </div>
                                                <div class="error-message" id="tableError"></div>
                                                <div class="table-responsive table-card">
                                                    <table class="table table-borderless table-centered align-middle table-nowrap mb-0" id="ordersTable">
                                                        <thead class="text-muted table-light">
                                                            <tr>
                                                                <th scope="col">Order ID</th>
                                                                <th scope="col">Customer</th>
                                                                <th scope="col">Quantity</th>
                                                                <th scope="col">Amount</th>
                                                                <th scope="col">Status</th>
                                                                <th scope="col">Action</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="ordersTableBody">
                                                        </tbody>
                                                    </table>
                                                </div>

                                                <!-- Pagination -->
                                                <div class="align-items-center mt-4 pt-2 justify-content-between row text-center text-sm-start"
                                                     id="ordersPagination">
                                                    <div class="col-sm">
                                                        <div class="text-muted">
                                                            Showing <span class="fw-semibold" id="ordersShowingStart">0</span>-<span class="fw-semibold"
                                                                                                                                     id="ordersShowingEnd">0</span> of
                                                            <span class="fw-semibold" id="ordersTotal">0</span> Results
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-auto mt-3 mt-sm-0">
                                                        <ul class="pagination pagination-separated pagination-sm mb-0 justify-content-center"
                                                            id="ordersPaginationList">
                                                            <!-- Pagination will be rendered here -->
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div> <!-- end .h-100-->

                        </div> <!-- end col -->
                        <script>
                            // Configuration
                            const API_CONFIG = {
                                BASE_URL: window.location.origin,
                                ENDPOINTS: {
                                    CHART_DATA: '/seller/ProductStatistics',
                                    TABLE_DATA: '/seller/RecentOrders'
                                },
                                TIMEOUT: 10000
                            };

                            // Order status configuration
                            const ORDER_STATUS = {
                                'Pending': { class: 'status-pending', text: 'PENDING' },
                                'PREPARING IN KITCHEN': { class: 'status-preparing', text: 'PREPARING IN KITCHEN' },
                                'Cancelled by User': { class: 'status-cancelled-user', text: 'CANCELLED BY USER' },
                                'Cancelled by Shop': { class: 'status-cancelled-shop', text: 'CANCELLED BY SHOP' },
                                'DELIVERY FAILED': { class: 'status-delivery-failed', text: 'DELIVERY FAILED' },
                                'DELIVERING': { class: 'status-delivering', text: 'DELIVERING' },
                                'CONFIRMED': { class: 'status-confirmed', text: 'CONFIRMED' }
                            };

                            // Global variables
                            let productStatsChart = null;
                            let currentChartPeriod = 'today';
                            let currentTablePeriod = 'today';
                            let allOrders = [];
                            let filteredOrders = [];
                            let currentPage = 1;
                            let itemsPerPage1 = 5;
                            let searchQuery = '';

                            // Chart functions
                            function getChartColorsArray(itemCount) {
                                const baseColors = [
                                    '#405189', '#0ab39c', '#f7b84b', '#f06548', '#299cdb',
                                    '#6f42c1', '#e83e8c', '#fd7e14', '#20c997', '#198754',
                                    '#dc3545', '#6610f2', '#d63384', '#495057', '#17a2b8'
                                ];

                                if (itemCount > baseColors.length) {
                                    const additionalColors = [];
                                    for (let i = baseColors.length; i < itemCount; i++) {
                                        const hue = (i * 137.508) % 360;
                                        const lightness = 45 + (i % 3) * 10;
                                        const saturation = 65 + (i % 2) * 20;
                                        additionalColors.push(`hsl(${hue}, ${saturation}%, ${lightness}%)`);
                                    }
                                    return [...baseColors, ...additionalColors];
                                }

                                return baseColors.slice(0, itemCount);
                            }

                            function loadChart(period = 'today', showOverlay = false) {
                                const chartContainer = document.getElementById('product-stats-chart');
                                const loadingElement = document.getElementById('chartLoading');
                                const overlayElement = document.getElementById('chartLoadingOverlay');
                                const errorElement = document.getElementById('chartError');

                                if (showOverlay && productStatsChart) {
                                    overlayElement.style.display = 'flex';
                                    loadingElement.style.display = 'none';
                                } else {
                                    loadingElement.style.display = 'block';
                                    overlayElement.style.display = 'none';
                                    if (productStatsChart) chartContainer.innerHTML = '';
                                }

                                errorElement.style.display = 'none';

                                $.ajax({
                                    url: `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CHART_DATA}`,
                                    method: 'GET',
                                    data: { period: period },
                                    timeout: API_CONFIG.TIMEOUT,
                                    success: function (response) {
                                        loadingElement.style.display = 'none';
                                        overlayElement.style.display = 'none';
                                        if (response && response.success && response.data) {
                                            renderChart(response.data);
                                        } else {
                                            renderChart({ series: [], labels: [], total: 0 });
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        loadingElement.style.display = 'none';
                                        overlayElement.style.display = 'none';
                                        chartContainer.innerHTML = `
                                                <div class="no-data-chart">
                                                    <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
                                                    <h5>Failed to load chart</h5>
                                                    <p class="mb-0 text-danger">Cannot load product statistics.</p>
                                                </div>
                                            `;
                                    }
                                });
                            }

                            function renderChart(data) {
                                const chartContainer = document.getElementById('product-stats-chart');

                                // Handle empty data
                                if (!data.series || data.series.length === 0) {
                                    if (productStatsChart) {
                                        productStatsChart.destroy();
                                        productStatsChart = null;
                                    }
                                    chartContainer.innerHTML = `
                                            <div class="no-data-chart d-flex flex-column align-items-center justify-content-center" style="height:330px;">
                                                <i class="fas fa-chart-pie fa-3x mb-3"></i>
                                                <h5>No Data Available</h5>
                                                <p class="mb-0">No product statistics found for the selected period.</p>
                                            </div>
                                        `;
                                    return;
                                }
                                if (productStatsChart) {
                                    productStatsChart.destroy();
                                    productStatsChart = null;
                                }
                                chartContainer.innerHTML = '';

                                const colors = getChartColorsArray(data.series.length);
                                const total = data.series.reduce((a, b) => a + b, 0);

                                const percentages = data.percentages; // <-- lấy từ response!

                                const options = {
                                    series: data.series,
                                    labels: data.labels,
                                    chart: {
                                        height: 333,
                                        type: "donut",
                                        animations: {
                                            enabled: true,
                                            easing: 'easeinout',
                                            speed: 800
                                        }
                                    },
                                    legend: {
                                        position: "bottom",
                                        labels: {
                                            colors: ['#495057'],
                                            useSeriesColors: false
                                        }
                                    },
                                    stroke: { show: false },
                                    dataLabels: { dropShadow: { enabled: false } },
                                    plotOptions: {
                                        pie: {
                                            donut: {
                                                size: '65%',
                                                labels: {
                                                    show: true,
                                                    name: {
                                                        show: true,
                                                        fontSize: '16px',
                                                        fontWeight: 600,
                                                        color: '#2d3748',
                                                        offsetY: -10
                                                    },
                                                    value: {
                                                        show: true,
                                                        fontSize: '24px',
                                                        fontWeight: 700,
                                                        color: '#1a202c',
                                                        offsetY: 10
                                                    },
                                                    total: {
                                                        show: true,
                                                        showAlways: true,
                                                        label: 'Total Products',
                                                        fontSize: '14px',
                                                        fontWeight: 600,
                                                        color: '#4a5568',
                                                        formatter: function (w) {
                                                            return w.globals.seriesTotals.reduce((a, b) => a + b, 0)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    colors: colors,
                                    tooltip: {
                                        enabled: true,
                                        theme: 'light',
                                        y: {
                                            formatter: function (val, opts) {
                                                const idx = opts.seriesIndex;
                                                const percent = percentages && percentages[idx] !== undefined ? percentages[idx] : '';
                                                return val + (percent !== '' ? ` (${percent}%)` : '');
                                            }
                                        }
                                    },
                                    responsive: [{
                                        breakpoint: 768,
                                        options: {
                                            chart: { height: 280 }
                                        }
                                    }]
                                };


                                if (productStatsChart) {
                                    productStatsChart.destroy();
                                }

                                productStatsChart = new ApexCharts(chartContainer, options);
                                productStatsChart.render();
                            }

                            // Table functions
                            function loadTable(period = 'today') {
                                const tableBody = document.getElementById('ordersTableBody');
                                const loadingElement = document.getElementById('tableLoading');
                                const errorElement = document.getElementById('tableError');

                                loadingElement.style.display = 'block';
                                errorElement.style.display = 'none';
                                tableBody.innerHTML = '';

                                $.ajax({
                                    url: `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TABLE_DATA}`,
                                    method: 'GET',
                                    data: { period: period },
                                    timeout: API_CONFIG.TIMEOUT,
                                    success: function (response) {
                                        loadingElement.style.display = 'none';
                                        if (response && response.success && Array.isArray(response.data)) {
                                            allOrders = response.data;
                                        } else {
                                            allOrders = [];
                                        }
                                        filteredOrders = allOrders;
                                        currentPage = 1;
                                        applySearch();
                                    },
                                    error: function (xhr, status, error) {
                                        loadingElement.style.display = 'none';
                                        errorElement.innerHTML = 'Failed to load orders data. Please try again later.';
                                        errorElement.style.display = 'block';
                                    }
                                });
                            }

                            function applySearch() {
                                const query = searchQuery.toLowerCase().trim();

                                if (query === '') {
                                    filteredOrders = allOrders;
                                } else {
                                    filteredOrders = allOrders.filter(order =>
                                        order.id.toLowerCase().includes(query) ||
                                        order.customer.name.toLowerCase().includes(query) ||
                                        order.status.toLowerCase().includes(query)
                                    );
                                }

                                currentPage = 1;
                                renderTable();
                            }

                            function renderTable() {
                                const tableBody = document.getElementById('ordersTableBody');

                                if (filteredOrders.length === 0) {
                                    const message = searchQuery ?
                                        `No orders found matching "${searchQuery}"` :
                                        'No orders found for this period';

                                    tableBody.innerHTML = `
                                            <tr>
                                                <td colspan="6" class="text-center text-muted py-4">
                                                    <i class="fas fa-inbox fa-2x mb-2"></i><br>
                                                    ${message}
                                                </td>
                                            </tr>
                                        `;
                                    document.getElementById('ordersPagination').style.display = 'none';
                                    return;
                                }

                                const totalItems = filteredOrders.length;
                                const totalPages = Math.ceil(totalItems / itemsPerPage1);
                                const startIndex = (currentPage - 1) * itemsPerPage1;
                                const endIndex = Math.min(startIndex + itemsPerPage1, totalItems);
                                const currentOrders = filteredOrders.slice(startIndex, endIndex);

                                const rows = currentOrders.map(order => {
                                    const statusConfig = ORDER_STATUS[order.status] || ORDER_STATUS['Pending'];
                                    return `
                                            <tr>
                                                <td>
                                             <a href="/seller/ViewOrderDetails/${order.id}" target="_blank" class="fw-medium link-primary">${order.id}</a>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                                                    <div class="flex-grow-1 wraphe">${order.customer.name}</div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span>${order.quantity}</span>
                                                </td>
                                                <td>
                                                    <span class="text-success">$${order.amount.toFixed(2)}</span>
                                                </td>
                                                <td>
                                                    <span class="badge ${statusConfig.class}">${statusConfig.text}</span>
                                                </td>
                                                <td>
                                                                               <button
                                class="btn btn-sm btn-outline-primary"
                                onclick="window.open('/seller/ViewOrderDetails/${order.id}', '_blank')"
                                type="button"
                            >
                                <i class="fas fa-eye me-1"></i>View Detail
                            </button>

                                                </td>
                                            </tr>
                                        `;
                                }).join('');

                                tableBody.innerHTML = rows;

                                document.getElementById('ordersShowingStart').textContent = startIndex + 1;
                                document.getElementById('ordersShowingEnd').textContent = endIndex;
                                document.getElementById('ordersTotal').textContent = totalItems;
                                document.getElementById('ordersPagination').style.display = 'flex';

                                renderPagination(totalPages);
                            }

                            function renderPagination(totalPages) {
                                const paginationList = document.getElementById('ordersPaginationList');

                                if (totalPages <= 1) {
                                    paginationList.innerHTML = '';
                                    return;
                                }

                                let paginationHTML = '';

                                // Previous button
                                if (currentPage > 1) {
                                    paginationHTML += `
                                            <li class="page-item">
                                                <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">←</a>
                                            </li>
                                        `;
                                } else {
                                    paginationHTML += `
                                            <li class="page-item disabled">
                                                <a class="page-link" href="#" tabindex="-1">←</a>
                                            </li>
                                        `;
                                }

                                const maxVisiblePages = 5;
                                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                                if (endPage - startPage + 1 < maxVisiblePages) {
                                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                                }

                                if (startPage > 1) {
                                    paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(1)">1</a></li>`;
                                    if (startPage > 2) {
                                        paginationHTML += `<li class="page-item disabled"><a class="page-link" href="#" tabindex="-1">...</a></li>`;
                                    }
                                }

                                for (let i = startPage; i <= endPage; i++) {
                                    if (i === currentPage) {
                                        paginationHTML += `<li class="page-item active"><a class="page-link" href="#">${i}</a></li>`;
                                    } else {
                                        paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${i})">${i}</a></li>`;
                                    }
                                }

                                if (endPage < totalPages) {
                                    if (endPage < totalPages - 1) {
                                        paginationHTML += `<li class="page-item disabled"><a class="page-link" href="#" tabindex="-1">...</a></li>`;
                                    }
                                    paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${totalPages})">${totalPages}</a></li>`;
                                }

                                // Next button
                                if (currentPage < totalPages) {
                                    paginationHTML += `
                                            <li class="page-item">
                                                <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">→</a>
                                            </li>
                                        `;
                                } else {
                                    paginationHTML += `
                                            <li class="page-item disabled">
                                                <a class="page-link" href="#" tabindex="-1">→</a>
                                            </li>
                                        `;
                                }

                                paginationList.innerHTML = paginationHTML;
                            }

                            function changePage(page) {
                                currentPage = page;
                                renderTable();
                            }

                            // Event handlers
                            $(document).ready(function () {
                                // Chart filter event handlers
                                $('.chart-filter').on('click', function (e) {
                                    e.preventDefault();
                                    const period = $(this).data('period');
                                    const periodText = $(this).text();

                                    $('#chartFilterText').text(periodText);
                                    currentChartPeriod = period;
                                    loadChart(period, true);
                                });

                                // Table filter event handlers
                                $('.table-filter').on('click', function (e) {
                                    e.preventDefault();
                                    const period = $(this).data('period');
                                    const periodText = $(this).text();

                                    $('#tableFilterText').text(periodText);
                                    currentTablePeriod = period;
                                    loadTable(period);
                                });

                                // Search functionality
                                $('#orderSearch').on('input', function () {
                                    searchQuery = $(this).val();
                                    applySearch();
                                });

                                $('#orderSearch').on('keydown', function (e) {
                                    if (e.key === 'Escape') {
                                        $(this).val('');
                                        searchQuery = '';
                                        applySearch();
                                    }
                                });

                                // Initial load
                                loadChart(currentChartPeriod);
                                loadTable(currentTablePeriod);

                                // Refresh data every 5 minutes
                                setInterval(function () {
                                    loadChart(currentChartPeriod, true);
                                    loadTable(currentTablePeriod);
                                }, 300000);
                            });

                            // Chart resize
                            window.addEventListener('resize', function () {
                                if (productStatsChart) {
                                    productStatsChart.resize();
                                }
                            });
                        </script>
                        
                    </div>

                </div>
                <!-- container-fluid -->
            </div>
            <!-- End Page-content -->

            <footer class="footer">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-sm-6">
                            <script>document.write(new Date().getFullYear())</script> © Velzon.
                        </div>
                        <div class="col-sm-6">
                            <div class="text-sm-end d-none d-sm-block">
                                Design & Develop by Themesbrand
                            </div>
                        </div>
                    </div>
                </div>
            </footer>
        </div>
        <!-- end main content-->

    </div>
    <!-- END layout-wrapper -->



    <!--start back-to-top-->
    <button onclick="topFunction()" class="btn btn-danger btn-icon" id="back-to-top">
        <i class="ri-arrow-up-line"></i>
    </button>
    <!--end back-to-top-->

    <!--preloader-->
    <div id="preloader">
        <div id="status">
            <div class="spinner-border text-primary avatar-sm" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    </div>

    <!-- JAVASCRIPT -->
    <script src="~/assetsAdmin/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/assetsAdmin/libs/simplebar/simplebar.min.js"></script>
    <script src="~/assetsAdmin/libs/node-waves/waves.min.js"></script>
    <script src="~/assetsAdmin/libs/feather-icons/feather.min.js"></script>
    <script src="~/assetsAdmin/js/pages/plugins/lord-icon-2.1.0.js"></script>
    <script src="~/assetsAdmin/js/plugins.js"></script>

    <!-- apexcharts -->
    <script src="~/assetsAdmin/libs/apexcharts/apexcharts.min.js"></script>

    <!-- Vector map-->
    <script src="~/assetsAdmin/libs/jsvectormap/jsvectormap.min.js"></script>
    <script src="~/assetsAdmin/libs/jsvectormap/maps/world-merc.js"></script>

    <!--Swiper slider js-->
    <script src="~/assetsAdmin/libs/swiper/swiper-bundle.min.js"></script>

    <!-- Dashboard init -->
    <script src="~/assetsAdmin/js/pages/dashboard-ecommerce.init.js"></script>

    <!-- App js -->
    <script src="~/assetsAdmin/js/app.js"></script>
    <script src="~/assetsAdmin/libs/chart.js/chart.umd.js"></script>

    <!-- chartjs init -->
    <script src="~/assetsAdmin/js/pages/chartjs.init.js"></script>

</body>


<!-- Mirrored from themesbrand.com/velzon/html/master// by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 26 Feb 2025 12:20:07 GMT -->

</html>
<script>
    // Khởi tạo biến global
    var customerImpressionChart = "";
  var currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM
var validMonths = [];

document.addEventListener("DOMContentLoaded", function () {
    $.ajax({
        url: '/Seller/GetValidMonths', // Đổi route nếu cần
        method: 'GET',
        dataType: 'json',
        success: function (months) {
            validMonths = months;
            initFlatpickrWithValidMonths();
        },
        error: function () {
            // Nếu lỗi, chỉ cho chọn tháng hiện tại
            validMonths = [currentMonth];
            initFlatpickrWithValidMonths();
        }
    });
});

function initFlatpickrWithValidMonths() {
    flatpickr("#monthPicker", {
        dateFormat: "Y-m",
        defaultDate: currentMonth,
        plugins: [
            new monthSelectPlugin({
                shorthand: true,
                dateFormat: "Y-m",
                altFormat: "F Y"
            })
        ],
        disable: [
            function (date) {
                var y = date.getFullYear();
                var m = (date.getMonth() + 1).toString().padStart(2, '0');
                var ym = y + '-' + m;
                return validMonths.indexOf(ym) === -1;
            }
        ],
        onChange: function (selectedDates, dateStr, instance) {
            currentMonth = dateStr;
            loadMonthlyData(dateStr);
        }
    });

    // Load dữ liệu cho tháng hiện tại
    loadMonthlyData(currentMonth);
}



    // Hàm load dữ liệu từ backend
    function loadMonthlyData(month) {
        // Hiển thị loading spinner
        showLoadingSpinners(true);

        // Gửi AJAX request
        $.ajax({
            url: '/seller/GetMonthlyData', 
            method: 'GET',
            data: {
                month: month
            },
            dataType: 'json',
            success: function (response) {
                // Cập nhật counter values
                updateCounterValues(response.summary);

                // Vẽ chart với dữ liệu nhận được
                renderMonthlyChart(response.chartData, month);

                // Ẩn loading spinner
                showLoadingSpinners(false);
            },
            error: function (xhr, status, error) {
                console.error('Error loading monthly data:', error);
                alert('Failed to load monthly data. Please try again later.');
            }
        });
    }

    // Hàm hiển thị/ẩn loading spinner
    function showLoadingSpinners(show) {
        // Xử lý spinner
        var spinners = document.querySelectorAll('.loading-spinner');
        spinners.forEach(function (spinner) {
            spinner.style.display = show ? 'inline-block' : 'none';
        });

        // Ẩn/hiện các counter
        var counters = [
            document.getElementById('ordersCounter'),
            document.getElementById('earningsCounter'),
            document.getElementById('refundsCounter'),
            document.getElementById('newCustomersCounter')
        ];
        counters.forEach(function (counter) {
            if (counter) {
                counter.style.display = show ? 'none' : 'inline';
            }
        });
    }

function updateCounterValues(summary) {
    var ordersElem = document.getElementById('ordersCounter');
    var earningsElem = document.getElementById('earningsCounter');
    var refundsElem = document.getElementById('refundsCounter');
    var newCustomersElem = document.getElementById('newCustomersCounter');
    if (!summary || summary.orders == null || summary.earnings == null || summary.refunds == null || summary.newCustomers == null) {
        if (ordersElem) ordersElem.textContent = '';
        if (earningsElem) earningsElem.textContent = '';
        if (refundsElem) refundsElem.textContent = '';
        if (newCustomersElem) newCustomersElem.textContent = '';
        return;
    }

    // Có dữ liệu hợp lệ mới hiện số
    if (ordersElem) ordersElem.textContent = summary.orders;
    if (earningsElem) earningsElem.textContent = summary.earnings;
    if (refundsElem) refundsElem.textContent = summary.refunds;
    if (newCustomersElem) newCustomersElem.textContent = summary.newCustomers;
}


    // Hàm vẽ chart
    function renderMonthlyChart(chartData, month) {
        var chartColors = getChartColorsArray("customer_charts");

        if (!chartColors) {
            console.warn('Chart colors not found');
            return;
        }

        // Tạo danh sách ngày trong tháng
        var daysInMonth = getDaysInMonth(month);
        var currentDate = new Date();
        var selectedDate = new Date(month + '-01');

        // Lọc dữ liệu theo ngày hiện tại (chỉ hiển thị đến ngày hiện tại)
        var filteredDays = daysInMonth.filter(function (day) {
            var dayDate = new Date(month + '-' + String(day).padStart(2, '0'));
            return dayDate <= currentDate || selectedDate.getMonth() !== currentDate.getMonth() || selectedDate.getFullYear() !== currentDate.getFullYear();
        });
        var categories = filteredDays.map(function (day) {
            return day + '/' + (selectedDate.getMonth() + 1);
        });

        var ordersData = processSeriesData(chartData.orders, filteredDays, month);
        var earningsData = processSeriesData(chartData.earnings, filteredDays, month);
        var refundsData = processSeriesData(chartData.refunds, filteredDays, month);
        var newCustomersData = processSeriesData(chartData.newCustomers, filteredDays, month);

        var options = {
            series: [
                {
                    name: "Orders",
                    type: "area",
                    data: ordersData
                },
                {
                    name: "Earnings",
                    type: "area",
                    data: earningsData
                },
                {
                    name: "Refunds",
                    type: "area",
                    data: refundsData
                },
                {
                    name: "New Customer",
                    type: "area",
                    data: newCustomersData
                }
            ],
            chart: {
                height: 370,
                type: "area",
                toolbar: { show: false },
                zoom: {
                    enabled: true,
                    type: 'x',
                    autoScaleYaxis: true  // Thêm dòng này
                }
            },
            stroke: {
                curve: "smooth",
                width: 2
            },
            fill: {
                type: "gradient",
                opacity: [0.3, 0.3, 0.3, 0.3]
            },
            xaxis: {
                categories: categories,
                axisTicks: { show: false },
                axisBorder: { show: false }
            },
            yaxis: {
                labels: {
                    formatter: function (val) {
                        if (val % 1 === 0) return val;
                        return val.toFixed(2);
                    }
                },
                forceNiceScale: true  // Thêm dòng này để làm cho scale đẹp hơn
            },
            grid: {
                show: true,
                xaxis: { lines: { show: true } },
                yaxis: { lines: { show: false } },
                padding: { top: 0, right: -2, bottom: 15, left: 10 }
            },
            legend: {
                show: true,
                horizontalAlign: "center",
                offsetX: 0,
                offsetY: -5,
                markers: { width: 9, height: 9, radius: 6 },
                itemMargin: { horizontal: 10, vertical: 0 }
            },
            colors: chartColors,
            tooltip: {
                shared: true,
                y: [{
                    formatter: function (value) {
                        return value !== undefined ? value.toFixed(0) : value;
                    }
                }, {
                    formatter: function (value) {
                        return value !== undefined ? "$" + value.toFixed(2) + "k" : value;
                    }
                }, {
                    formatter: function (value) {
                        return value !== undefined ? value.toFixed(0) + " Sales" : value;
                    }
                }, {
                    formatter: function (value) {
                        return value !== undefined ? value.toFixed(0) + " Customer" : value;
                    }
                }]
            }
        };

        // Destroy existing chart if exists
        if (customerImpressionChart && customerImpressionChart.destroy) {
            customerImpressionChart.destroy();
        }

        // Render new chart
        customerImpressionChart = new ApexCharts(
            document.querySelector("#customer_charts"),
            options
        );
        customerImpressionChart.render();
    }

    // Hàm lấy số ngày trong tháng
    function getDaysInMonth(month) {
        var date = new Date(month + '-01');
        var year = date.getFullYear();
        var monthNum = date.getMonth();
        var daysInMonth = new Date(year, monthNum + 1, 0).getDate();

        var days = [];
        for (var i = 1; i <= daysInMonth; i++) {
            days.push(i);
        }
        return days;
    }

    // Hàm xử lý dữ liệu series
    function processSeriesData(data, days, month) {
        return days.map(function (day) {
            var dateKey = month + '-' + String(day).padStart(2, '0');
            return data[dateKey] || 0; // Nếu không có dữ liệu thì trả về 0
        });
    }

    // Hàm load dữ liệu demo (dùng khi có lỗi AJAX)
    function loadDemoData(month) {
        var daysInMonth = getDaysInMonth(month);
        var currentDate = new Date();
        var selectedDate = new Date(month + '-01');

        // Tạo dữ liệu demo
        var demoData = {
            summary: {
                orders: Math.floor(Math.random() * 10000) + 5000,
                earnings: (Math.random() * 50 + 10).toFixed(2),
                refunds: Math.floor(Math.random() * 500) + 100,
                newCustomers: (Math.random() * 30 + 5).toFixed(2)
            },
            chartData: {
                orders: {},
                earnings: {},
                refunds: {},
                newCustomers: {}
            }
        };

        // Tạo dữ liệu random cho từng ngày
        daysInMonth.forEach(function (day) {
            var dateKey = month + '-' + String(day).padStart(2, '0');
            var dayDate = new Date(dateKey);

            // Chỉ tạo dữ liệu cho các ngày <= ngày hiện tại (nếu cùng tháng/năm)
            if (dayDate <= currentDate || selectedDate.getMonth() !== currentDate.getMonth() || selectedDate.getFullYear() !== currentDate.getFullYear()) {
                demoData.chartData.orders[dateKey] = Math.floor(Math.random() * 100) + 10;
                demoData.chartData.earnings[dateKey] = Math.random() * 200 + 50;
                demoData.chartData.refunds[dateKey] = Math.floor(Math.random() * 20);
                demoData.chartData.newCustomers[dateKey] = Math.floor(Math.random() * 50) + 5;
            }
        });

        // Cập nhật UI với dữ liệu demo
        updateCounterValues(demoData.summary);
        renderMonthlyChart(demoData.chartData, month);
    }

    // Resize handler
    window.addEventListener('resize', function () {
        setTimeout(function () {
            if (customerImpressionChart && customerImpressionChart.render) {
                customerImpressionChart.render();
            }
        }, 100);
    });
    </script>