@using Repository.ViewModels
@model List<Repository.ViewModels.StoreCartViewModel>
<!DOCTYPE html>
<html class="no-js" lang="en">

<head>
    <meta charset="utf-8">
    <title>Nest - Multipurpose eCommerce HTML Template</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="~/assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link rel="stylesheet" href="~/assets/css/main.css?v=6.0">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="chrome-extension://mooikfkahbdckldjjndioackbalphokd/~/assets/prompt.js"></script>
    @Html.Raw(" <link href='https://cdn.jsdelivr.net/npm/@flaticon/flaticon-uicons/css/all/all.css' rel='stylesheet'>")

    <link rel="stylesheet" href="~/assets/js/gridjs/theme/mermaid.min.css">
            <!-- Icons Css -->
    <link href="~/assetsAdmin/css/icons.min.css" rel="stylesheet" type="text/css" />
    <style>
        /* ƒê·∫£m b·∫£o v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi cho ·∫£nh */
        .product-thumbnail {
            position: relative;
        }

        /* 1. L√†m m·ªù v√† v√¥ hi·ªáu h√≥a t∆∞∆°ng t√°c khi c√≥ class 'outofstock' */
        .outofstock {
            opacity: 0.5;
            /* L√†m m·ªù to√†n b·ªô d√≤ng */
            pointer-events: none;
            /* Kh√¥ng cho t∆∞∆°ng t√°c */
        }

        /* CSS chung cho layout */
        table {
            width: 100%;
            border-collapse: collapse;
        }

        .product-name a {
            text-decoration: none;
            color: #333;
        }
        /* C·∫≠p nh·∫≠t tr·∫°ng th√°i l√†m m·ªù */
        .outofstock .qty-up {
            pointer-events: none; /* V√¥ hi·ªáu h√≥a n√∫t tƒÉng */
        }

        .outofstock .qty-down {
            pointer-events: auto; /* Cho ph√©p ng∆∞·ªùi d√πng gi·∫£m s·ªë l∆∞·ª£ng */
        }

        .out-of-stock-label {
            color: red;
            font-weight: bold;
            font-size: 14px;
            display: block;
        }
    </style>

</head>

<body>

    @await Html.PartialAsync("_Header")
    <!--End header-->
    <main class="main">
        <div class="container mb-30 mt-30">
            <div class="row">
                <div class="col-lg-8 mb-40">
                    <h1 class="heading-2 mb-10">Your Cart</h1>
                    <div class="d-flex justify-content-between">
                        <h6 class="text-body">There are <span class="text-brand">@Model.Count</span> products in your cart</h6>
<h6 class="text-body">
    <a href="#" class="text-muted" id="clearCartBtn">
        <i class="fi-rs-trash mr-5"></i>Clear Cart
    </a>
</h6>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-8">
                    <div id = "cart-container1" class="table-responsive shopping-summery">
                     @foreach (var store in Model)
{
    <div class="store-cart mb-5">
<a asp-action="GetStoreDetail" asp-route-id="@store.StoreID" class="text-decoration-none">
    <h4 class="mb-3 text-primary">üõíStore: @store.StoreName</h4>
</a>

        <table class="table table-wishlist">
            <thead>
                <tr class="main-heading">
                    <th class="custome-checkbox start pl-30">
                        <input class="form-check-input select-all" type="checkbox" id="select-all-@store.StoreID" data-store-id="@store.StoreID" />
                        <label class="form-check-label" for="select-all-@store.StoreID"></label>
                    </th>
                    <th scope="col">Product</th>
                    <th scope="col">ProductName</th>
                    <th scope="col">Unit Price</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Subtotal</th>
                    <th scope="col" class="end">Remove</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in store.CartItems)
                {
                    <tr class="@(item.quantity > item.Stock ? "outofstock" : "")">
                        <td class="custome-checkbox pl-30">
                            <input class="form-check-input cart-item" type="checkbox" name="checkbox[]" data-store-id="@store.StoreID" id="checkbox-@item.ProductTypeID" value="@item.ProductTypeID">
                            <label class="form-check-label" for="checkbox-@item.ProductTypeID"></label>
                        </td>
                        <td class="image product-thumbnail">
                            <a asp-controller="Home" asp-action="ProductDetail" asp-route-id="@item.ProductID">
                                <img src="@(item.img ?? "/images/default-product.png")" alt="@(item.ProductTyName ?? "S·∫£n ph·∫©m kh√¥ng t√™n")" width="70">
                            </a>
                        </td>
                        <td class="product-des product-name">
                            <h6 class="mb-5">
                                <a class="product-name mb-10 text-heading" asp-controller="Home" asp-action="ProductDetail" asp-route-id="@item.ProductID">
                                    @(item.ProductTyName ?? "S·∫£n ph·∫©m kh√¥ng t√™n")
                                </a>
                            </h6>
                        </td>
                        <!-- Gi√° ƒë∆°n v·ªã -->
<td class="price" data-title="Price">
    <h4 class="text-body" id="price-@item.ProductTypeID">
        @item.price.ToString("N0") ƒë
    </h4>
</td>
                        <td class="text-center detail-info" data-title="Stock">
                            <div class="detail-extralink mr-15">
                                <div class="detail-qty border radius">
                                    <a href="#" class="qty-down" data-id="@item.ProductTypeID">
                                        <i class="fi-rs-angle-small-down"></i>
                                    </a>
                                    <input type="text" name="quantity" class="qty-val" value="@item.quantity"
                                           data-id="@item.ProductTypeID" data-stock="@item.Stock" min="1">
                                    <a href="#" class="qty-up" data-id="@item.ProductTypeID">
                                        <i class="fi-rs-angle-small-up"></i>
                                    </a>
                                </div>
                            </div>
                        </td>
                       <td class="price" data-title="Subtotal">
    <h4 class="text-brand" id="subtotal-@item.ProductTypeID">
        @item.Subtotal.ToString("N0") ƒë
    </h4>
</td>
                        <td class="action text-center" data-title="Remove">
                            <a type="button" class="text-body delete-cart" data-id="@item.CartID">
                                <i class="fi-rs-trash"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

                    </div>
                    <div class="divider-2 mb-30"></div>
                    <!-- N√∫t ch·ªçn voucher -->
                    <div class="cart-action d-flex justify-content-end">
                        @* <a class="btn"><i class="fi-rs-arrow-left mr-10"></i>Continue Shopping</a> *@
                        <a class="btn mr-10 mb-sm-15" data-bs-toggle="modal" data-bs-target="#voucherShopeeModal">
                            <i class="fi-rs-refresh mr-10"></i>Voucher
                        </a>
                    </div>

                    <!-- CSS -->
                    <style>
                        #voucherListContainer {
                            max-height: 50vh;
                            overflow-y: auto;
                        }
                    </style>

                    <!-- Modal -->
                    <div class="modal fade" id="voucherShopeeModal" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered">
                            <div class="modal-content rounded-3">

                                <!-- Header -->
                                <div class="modal-header">
                                    <h5 class="modal-title fw-bold">Select Foods  Voucher Voucher</h5>
                                    <a href="#" id="helpLink" class="text-muted small" data-bs-toggle="popover"
                                       data-bs-trigger="focus" data-bs-html="true" title="Support" data-bs-content='
                    <strong>How to Use Vouchers</strong><br>
                    To apply a Foods  Voucher voucher code, please select the "Save" button to get the voucher.<br><br>
                    <strong>How to Find Vouchers</strong><br>
                    You can find Foods  Voucher Vouchers throughout the Foods  Voucher.vn website and the app.
                    '>
                    Support <i class="bi bi-question-circle"></i>
                </a>
                                </div>

                                <!-- Body -->
                                <div class="modal-body pt-0">

                                    <!-- Search -->
                                    <div class="input-group my-3">
                                        <span class="input-group-text">Voucher Code</span>
                                        <input id="voucherSearchInput" type="text" class="form-control"
                                               placeholder="Enter code...">

                                        <button id="applyVoucherCode" class="btn btn-outline-primary">APPLY</button>

                                    </div>
                                    <span id="voucherSearchError" class="text-danger small ms-1"></span>

                                    <!-- Voucher type tab -->
                                    <ul class="nav nav-pills mb-3" id="voucherTab" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link active" data-type="all" type="button">
                                                All
                                                Vouchers
                                            </button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link" data-type="store" type="button">
                                                Store
                                                Vouchers
                                            </button>
                                        </li>
                                    </ul>

                                    <!-- Scrollable Voucher List only -->
                                    <div id="voucherListContainer">
                                        <!-- AJAX renders here -->
                                    </div>

                                </div>

                                <!-- Footer -->
                                <div class="modal-footer justify-content-between">
                                    <div class="small" id="selectedVoucherInfo">
                                        No voucher selected
                                    </div>
                                    <div>
                                        <button class="btn btn-secondary" data-bs-dismiss="modal">BACK</button>
                                        <button class="btn btn-danger" id="confirmVoucherBtn">OK</button>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            const helpLink = document.getElementById('helpLink');
                            new bootstrap.Popover(helpLink);
                        });
                    </script>
                 
                    <div class="modal fade" id="voucherConditionModal" tabindex="-1" aria-labelledby="voucherConditionModalLabel"
                         aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content rounded-3">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="voucherConditionModalLabel">Voucher Conditions</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <p><strong>Applicable for minimum order:</strong> ‚Ç´200,000</p>
                                    <p><strong>Maximum discount:</strong> ‚Ç´50,000</p>
                                    <p><strong>Only applicable for products from shop XYZ</strong></p>
                                    <p class="text-muted small">Validity period: 01/06/2025 - 15/06/2025</p>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                @{
    decimal total = 0; // üîπ Bi·∫øn l∆∞u t·ªïng gi√° tr·ªã
}
                <div class="col-lg-4">
                    <div class="border p-md-4 cart-totals ml-30">
                        <div class="table-responsive">
                            <table class="table no-border">
                          

@foreach (var store in Model)
{
    foreach (var cartItem in store.CartItems)
    {
        total += cartItem.Subtotal;
    }
}

                                
                                     <tbody>

                                    <tr>
                                        <td class="cart_total_label">
        <h6 class="text-muted">Subtotal</h6> <!-- ‚úÖ Ghi nh√£n ƒë√∫ng -->
                                        </td>
                                        <td class="cart_total_amount">
                                            <h5 class="text-end" id="subtotal-amount">@total.ToString("‚Ç´#,##0")</h5>
                                        </td>
                                    </tr>

                                    <tr id="codevocher-row" style="display: none;">
                                        <td class="cart_total_label">
                                            <h6 class="text-muted">Voucher Discount</h6>
                                        </td>
                                        <td class="cart_total_amount">
                                            <h5 class="text-danger text-end" id="codevocher">-‚Ç´0</h5>
                                        </td>
                                    </tr>
                                    <tr id="discount-row" style="display: none;">
                                        <td class="cart_total_label">
                                            <h6 class="text-muted">Discount Amount</h6>
                                        </td>
                                        <td class="cart_total_amount">
                                            <h5 class="text-danger text-end" id="discount-amount">-‚Ç´0</h5>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td class="cart_total_label">
                                            <h6 class="text-muted">Total</h6>
                                        </td>
                                        <td class="cart_total_amount">
                                            <h4 class="text-brand text-end" id="cart-total">@total.ToString("‚Ç´#,##0")</h4>
                                        </td>
                                    </tr>


                                 @*    <tr>
                                        <td scope="col" colspan="2">
                                            <div class="divider-2 mt-10 mb-10"></div>
                                        </td>
                                    </tr> *@
                                 @*    <tr>
                                        <td class="cart_total_label">
                                            <h6 class="text-muted">Shipping</h6>
                                        </td>
                                        <td class="cart_total_amount">
                                            <h5 class="text-heading text-end">Free</h5
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="cart_total_label">
                                            <h6 class="text-muted">Estimate for</h6>
                                        </td>
                                        <td class="cart_total_amount">
                                            <h5 class="text-heading text-end">United Kingdom</h5
                                        </td>
                                    </tr> *@
                                  @*   <tr>
                                        <td scope="col" colspan="2">
                                            <div class="divider-2 mt-10 mb-10"></div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="cart_total_label">
                                            <h6 class="text-muted">Total</h6>
                                        </td>
                                        <td class="cart_total_amount">
                                            <h4 class="text-brand text-end">@total</h4>
                                        </td>
                                    </tr> *@
                                </tbody>
                            
                               
                            </table>
                        </div>
                        @Html.AntiForgeryToken()
                        <button id="btn-submit" class="btn mb-20 w-100">Proceed To CheckOut<i class="fi-rs-sign-out ml-15"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    @await Html.PartialAsync("_Footer_User")
    <!-- Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="text-center">
                    <img src="~/assets/imgs/theme/loading.gif" alt="">
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
   <script>
  $(document).ready(function () {
    var quantityQueue = {}; // H√†ng ƒë·ª£i l∆∞u c√°c thay ƒë·ªïi s·ªë l∆∞·ª£ng
    var debounceTimeout = 500; // Th·ªùi gian debounce (ms)
    var isProcessing = false; // Bi·∫øn ki·ªÉm so√°t tr·∫°ng th√°i x·ª≠ l√Ω
    var isButtonClick = false; // Bi·∫øn ph√¢n bi·ªát click n√∫t vs nh·∫≠p tr·ª±c ti·∫øp

    function checkStock(inputField) {
        var productTypeId = inputField.data("id");
        if (!productTypeId) return;

        var stockQty = parseInt(inputField.attr("data-stock")) || 0;
        var currentQty = parseInt(inputField.val()) || 0;
        var row = inputField.closest("tr");

        // X√≥a nh√£n c≈©
        row.find(".out-of-stock-label").remove();
        row.removeClass("outofstock");

        if (currentQty > stockQty) {
            row.addClass("outofstock");
            row.find(".product-des").append('<span class="out-of-stock-label text-danger small">S·ªë l∆∞·ª£ng v∆∞·ª£t kho!</span>');
            row.find(".qty-up").prop("disabled", true);
            row.find(".qty-down").prop("disabled", false);
        } else {
            row.find(".qty-up").prop("disabled", false);
            row.find(".qty-down").prop("disabled", currentQty <= 1);
        }

        $(".qty-up[data-id='" + productTypeId + "']").toggle(currentQty < stockQty);
        $(".qty-down[data-id='" + productTypeId + "']").toggle(currentQty > 1);
    }

   function updateTotalPrice() {
    var total = 0;
    var hasCheckedItems = $("input.cart-item:checked").length > 0;

    if (hasCheckedItems) {
        $("input.cart-item:checked").each(function () {
            var row = $(this).closest("tr");
            if (!row.hasClass("outofstock")) {
                var unitPrice = parseFloat(row.find("td[data-title='Price'] h4").text().replace(/[^\d]/g, '')) || 0;
                var quantity = parseInt(row.find("input.qty-val").val()) || 0;
                total += unitPrice * quantity;
            }
        });
    } else {
        $("tr").not(".outofstock").each(function () {
            var row = $(this);
            var unitPrice = parseFloat(row.find("td[data-title='Price'] h4").text().replace(/[^\d]/g, '')) || 0;
            var quantity = parseInt(row.find("input.qty-val").val()) || 0;
            total += unitPrice * quantity;
        });
    }

    // G√°n gi√° tr·ªã hi·ªÉn th·ªã
    $("#cart-total").text(`‚Ç´${total.toLocaleString("en-US")}`);
    $("#subtotal-amount").text(`‚Ç´${total.toLocaleString("en-US")}`);
}


    function debounce(func, wait) {
        var timeout;
        return function () {
            var context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(function () {
                func.apply(context, args);
            }, wait);
        };
    }

    function processQuantityChange(productTypeId, newQty, inputField, callback) {
        var stockQty = parseInt(inputField.attr("data-stock")) || 0;

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng h·ª£p l·ªá
// Validate quantity
if (newQty < 1) {
    newQty = 1;
    new Notify({
        status: 'error',
        title: 'Failed',
        text: 'Minimum quantity is 1.',
        effect: 'fade',
        speed: 300,
        showIcon: true,
        showCloseButton: true,
        autoclose: true,
        autotimeout: 3000,
        position: 'right top'
    });
} else if (newQty > stockQty) {
    newQty = stockQty;
    new Notify({
        status: 'error',
        title: 'Failed',
        text: 'Quantity exceeds available stock!',
        effect: 'fade',
        speed: 300,
        showIcon: true,
        showCloseButton: true,
        autoclose: true,
        autotimeout: 3000,
        position: 'right top'
    });
}



        // C·∫≠p nh·∫≠t h√†ng ƒë·ª£i
        quantityQueue[productTypeId] = { quantity: newQty, input: inputField, callback: callback };

        // G·ª≠i y√™u c·∫ßu AJAX (ƒë∆∞·ª£c debounce) ch·ªâ khi kh√¥ng ƒëang x·ª≠ l√Ω
        if (!isProcessing) {
            sendQuantityUpdate(productTypeId);
        }
    }

    var sendQuantityUpdate = debounce(function (productTypeId) {
        if (isProcessing || !quantityQueue[productTypeId]) return;

        isProcessing = true;
        var queuedItem = quantityQueue[productTypeId];
        var newQty = queuedItem.quantity;
        var inputField = queuedItem.input;
        var callback = queuedItem.callback;

        // L∆∞u gi√° tr·ªã g·ªëc ƒë·ªÉ rollback n·∫øu c·∫ßn
        var originalValue = inputField.val();

        // X√≥a kh·ªèi h√†ng ƒë·ª£i
        delete quantityQueue[productTypeId];

        $.ajax({
            url: "/Home/CheckQuantity",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ ProductTypeID: productTypeId, quantity: newQty }),
            success: function (res) {
                if (res.success) {
                    // T·∫°m th·ªùi t·∫Øt event listener ƒë·ªÉ tr√°nh trigger l·∫°i
                    var inputElement = inputField[0];
                    var clonedElement = inputElement.cloneNode(true);
                    
                    // C·∫≠p nh·∫≠t gi√° tr·ªã m√† kh√¥ng trigger event
                    inputElement.parentNode.replaceChild(clonedElement, inputElement);
                    $(clonedElement).val(res.quantity);
                    
                    // ƒêƒÉng k√Ω l·∫°i event listener
                    $(clonedElement).on("input", inputHandler);
                    
                    var unitPrice = parseFloat($("#price-" + productTypeId).text().replace(/,/g, '')) || 0;
                    var subtotal = res.quantity * unitPrice;
                    $("#subtotal-" + productTypeId).text(subtotal.toLocaleString("en-US") + " ƒë");
                    checkStock($(clonedElement));
                    updateTotalPrice();
                    if (callback) callback(true);
                } else {
                    alert("‚ö†Ô∏è " + res.message);
                    inputField.val(originalValue);
                    checkStock(inputField);
                    updateTotalPrice();
                    if (callback) callback(false);
                }
            },
            error: function () {
                alert("‚ö†Ô∏è L·ªói server.");
                inputField.val(originalValue);
                checkStock(inputField);
                updateTotalPrice();
                if (callback) callback(false);
            },
            complete: function () {
                isProcessing = false;
                isButtonClick = false; // Reset flag
                
                // Ki·ªÉm tra n·∫øu c√≤n y√™u c·∫ßu trong h√†ng ƒë·ª£i
                if (Object.keys(quantityQueue).length > 0) {
                    var nextProductId = Object.keys(quantityQueue)[0];
                    sendQuantityUpdate(nextProductId);
                }
            }
        });
    }, debounceTimeout);

    // ƒê·ªãnh nghƒ©a input handler ƒë·ªÉ c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng
    var inputHandler = debounce(function () {
        // B·ªè qua n·∫øu l√† t·ª´ button click
        if (isButtonClick) return;
        
        var input = $(this);
        var productTypeId = input.data("id");
        if (!productTypeId) return;

        var newQty = parseInt(input.val()) || 1;
        processQuantityChange(productTypeId, newQty, input);
    }, debounceTimeout);

    // X·ª≠ l√Ω tƒÉng/gi·∫£m b·∫±ng n√∫t
    $(".qty-up, .qty-down").on("click", function (e) {
        e.preventDefault();
        isButtonClick = true; // ƒê√°nh d·∫•u l√† button click
        
        var button = $(this);
        var productTypeId = button.data("id");
        if (!productTypeId) return;

        var inputField = $("input[data-id='" + productTypeId + "']");
        var currentQty = parseInt(inputField.val()) || 0;
        var isIncrease = button.hasClass("qty-up");
        var newQty = isIncrease ? currentQty + 1 : currentQty - 1;

        button.html('<i class="fas fa-spinner fa-spin"></i>');
        processQuantityChange(productTypeId, newQty, inputField, function (success) {
            button.html(isIncrease ? '<i class="fi-rs-angle-small-up"></i>' : '<i class="fi-rs-angle-small-down"></i>');
        });
    });

    // X·ª≠ l√Ω nh·∫≠p tr·ª±c ti·∫øp v√†o √¥ input
    $(".qty-val").on("input", inputHandler);

    // Ch·ªçn s·∫£n ph·∫©m ‚Üí b·ªè ch·ªçn store kh√°c
    $(".cart-item").on("change", function () {
        var storeId = $(this).data("store-id");

        if ($(this).is(":checked")) {
            $(".cart-item").not("[data-store-id='" + storeId + "']").prop("checked", false);
            $(".select-all").not("[data-store-id='" + storeId + "']").prop("checked", false);
        }

        var totalItems = $(".cart-item[data-store-id='" + storeId + "']").length;
        var checkedItems = $(".cart-item[data-store-id='" + storeId + "']:checked").length;
        $(".select-all[data-store-id='" + storeId + "']").prop("checked", totalItems === checkedItems);

        updateTotalPrice();
    });

    // Ch·ªçn select-all store ‚Üí b·ªè store kh√°c
    $(".select-all").on("change", function () {
        var storeId = $(this).data("store-id");
        var isChecked = $(this).is(":checked");

        $(".select-all").not(this).prop("checked", false);
        $(".cart-item").not("[data-store-id='" + storeId + "']").prop("checked", false);
        $(".cart-item[data-store-id='" + storeId + "']").prop("checked", isChecked);

        updateTotalPrice();
    });

    // Kh·ªüi ƒë·ªông ban ƒë·∫ßu
    $("input.qty-val").each(function () {
        checkStock($(this));
    });
    updateTotalPrice();
});
</script>








   <script>
    $(document).ready(function () {
    $(".delete-cart").click(function (e) {
        e.preventDefault(); // NgƒÉn h√†nh vi m·∫∑c ƒë·ªãnh (d√π ƒë√£ d√πng button)

        var cartId = $(this).data("id");
        if (!cartId) {
            Swal.fire({
                title: "Error!",
                text: "Cart ID not found.",
                icon: "error"
            });
            return;
        }

        Swal.fire({
            title: "Are you sure you want to delete?",
            text: "This product will be removed from your cart!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Delete",
            cancelButtonText: "Cancel"
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "/Home/DeleteCart",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ CartID: cartId }),
                    success: function (response) {
                        if (response.success === true) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "The product has been removed from your cart.",
                                icon: "success",
                                timer: 2000,
                                showConfirmButton: false
                            });

                            // T√¨m h√†ng d·ª±a tr√™n CartID
                            var row = $(".delete-cart[data-id='" + cartId + "']").closest("tr");
                            var removedSubtotal = parseFloat(row.find("td.price h4.text-brand").text().replace(/,/g, '')) || 0;
                            row.remove();

                            var currentTotal = parseFloat($("#cart-total").text().replace(/,/g, '')) || 0;
                            var newTotal = currentTotal - removedSubtotal;
                            $("#cart-total").text(newTotal.toFixed(2));
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: response.message || "Failed to delete the product.",
                                icon: "error"
                            });
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 401) {
                            Swal.fire({
                                title: "Unauthorized!",
                                text: "Please log in to perform this action.",
                                icon: "warning"
                            }).then(() => {
                                window.location.href = "/Home/Login"; // Chuy·ªÉn h∆∞·ªõng th·ªß c√¥ng
                            });
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: "Something went wrong. Please try again.",
                                icon: "error"
                            });
                        }
                    }
                });
            }
        });
    });
});
</script>

    <script>
       $(document).ready(function () {
    function getTotalPrice() {
        var total = 0;
        $("tr").not(".outofstock").each(function () {
            var row = $(this);
            var unitPrice = parseFloat(row.find("td[data-title='Price'] h4").text().replace(/[^\d]/g, '')) || 0;
            var quantity = parseInt(row.find("input.qty-val").val()) || 0;
            var subtotal = unitPrice * quantity;
            total += subtotal;
        });
        return total;
    }

    function updateSelectedTotal() {
        var total = 0;
        var checkedItems = $("input.form-check-input:checked");

        console.log("üü¢ S·ªë l∆∞·ª£ng checkbox ƒë∆∞·ª£c ch·ªçn:", checkedItems.length);

        if (checkedItems.length > 0) {
            checkedItems.each(function () {
                var row = $(this).closest("tr");
                if (!row.hasClass("outofstock")) {
                    var unitPrice = parseFloat(row.find("td[data-title='Price'] h4").text().replace(/[^\d]/g, '')) || 0;
                    var quantity = parseInt(row.find("input.qty-val").val()) || 0;
                    var subtotal = unitPrice * quantity;
                    total += subtotal;
                }
            });
        } else {
            total = getTotalPrice();
            console.log("‚ö° Kh√¥ng c√≥ checkbox n√†o ƒë∆∞·ª£c ch·ªçn. T·ªïng ti·ªÅn =", total);
        }

        // ‚úÖ C·∫≠p nh·∫≠t giao di·ªán
        document.getElementById("subtotal-amount").innerText = `‚Ç´${total.toLocaleString()}`;
        document.getElementById("cart-total").innerText = `‚Ç´${total.toLocaleString()}`;
    }

    // Khi checkbox thay ƒë·ªïi
    $("input.form-check-input").change(function () {
        updateSelectedTotal();
    });

    // Checkbox select-all
    $("#exampleCheckbox11").change(function () {
        var isChecked = $(this).prop("checked");
        $("input.form-check-input").prop("checked", isChecked).trigger("change");
    });

    // ‚úÖ Khi t·∫£i trang: reset t·∫•t c·∫£ v√† t√≠nh l·∫°i t·ªïng
    $("input.form-check-input").prop("checked", false);
    updateSelectedTotal();
});



        $("#btn-submit").click(function () {
            var token = $("input[name='__RequestVerificationToken']").val();
            var selectedProducts = [];

            $("input.form-check-input:checked").each(function () {
                selectedProducts.push($(this).val());
            });

            if (selectedProducts.length === 0) {
                new Notify({
                    status: 'error',
                    title: 'Failed',
                    text: 'Please select at least one product.',
                    effect: 'fade',
                    speed: 300,
                    showIcon: true,
                    showCloseButton: true,
                    autoclose: true,
                    autotimeout: 3000,
                    position: 'right top'
                });
                return;
            }

            function isValidGuid(str) {
                return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(str);
            }

            const formData = new FormData();
            formData.append("__RequestVerificationToken", token);
            selectedProducts.forEach(id => {
                if (isValidGuid(id)) {
                    formData.append("productIds[]", id);
                }
            });
            if (selectedVoucherCode) {
                formData.append("voucherCode", selectedVoucherCode);
            }

            $.ajax({
                url: "/Users/Buy",
                type: "POST",
                data: formData,
                processData: false, // NgƒÉn jQuery x·ª≠ l√Ω d·ªØ li·ªáu
                contentType: false, // ƒê·ªÉ tr√¨nh duy·ªát t·ª± ƒë·ªông thi·∫øt l·∫≠p content-type
                success: function (response) {

                    if (response.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'You will be redirected to the payment page...',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed || result.isDismissed) {
                                window.location.href = response.redirectUrl;
                            }
                        });
                    } else {
                        new Notify({
                            status: 'error',
                            title: 'Failed',
                            text: response.msg || 'Sending failed!',
                            effect: 'fade',
                            speed: 300,
                            showIcon: true,
                            showCloseButton: true,
                            autoclose: true,
                            autotimeout: 3000,
                            position: 'right top'
                        });
                    }



                },
                error: function () {
                    new Notify({
                        status: 'error',
                        title: 'Failed',
                        text: 'An error occurred, please try again!',
                        effect: 'fade',
                        speed: 300,
                        showIcon: true,
                        showCloseButton: true,
                        autoclose: true,
                        autotimeout: 3000,
                        position: 'right top'
                    });

                }
            });
        });




    </script>
   <script>
    $(document).ready(function () {
        $("#clearCartBtn").click(function (e) {
            e.preventDefault();

            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to clear the entire cart?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, clear it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: "/Home/DeleteAllCart",
                        contentType: "application/json; charset=utf-8",
                        success: function (response) {
                            Swal.fire({
                                title: response.success ? 'Success' : 'Oops!',
                                text: response.message,
                                icon: response.success ? 'success' : 'error',
                                confirmButtonText: 'OK',
                                timer: 2000,
                                timerProgressBar: true,
                                position: 'center',
                                showConfirmButton: false
                            });

                            if (response.success) {
                                setTimeout(() => location.reload(), 2000);
                            }
                        },
                        error: function () {
                            Swal.fire({
                                title: 'Error',
                                text: 'An error occurred while clearing the cart.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                }
            });
        });
    });
</script>


   @*  <script>
        $(document).ready(function () {
            function checkStock() {
                $("input.qty-val").each(function () {
                    var inputField = $(this);
                    var productId = inputField.data("id");
                    var stockQty = parseInt(inputField.attr("data-stock")) || 0;
                    var currentQty = parseInt(inputField.val()) || 0;
                    var row = inputField.closest("tr");

                    console.log("üîç Ki·ªÉm tra s·∫£n ph·∫©m:", productId);
                    console.log("üì¶ Kho th·ª±c t·∫ø:", stockQty, "üõí Gi·ªè h√†ng:", currentQty);

                    // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng trong gi·ªè h√†ng v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng kho
                    if (currentQty > stockQty) {
                        row.addClass("outofstock"); // L√†m m·ªù v√† v√¥ hi·ªáu h√≥a
                        if (!row.find(".out-of-stock-label").length) {
                            row.find(".product-des").append('<span class="out-of-stock-label">‚ö†Ô∏è S·ªë l∆∞·ª£ng trong kho ƒë√£ thay ƒë·ªïi!</span>');
                        }
                        // V√¥ hi·ªáu h√≥a n√∫t tƒÉng
                        row.find(".qty-up").prop("disabled", true);
                        // Cho ph√©p gi·∫£m s·ªë l∆∞·ª£ng
                        row.find(".qty-down").prop("disabled", false);
                    } else {
                        row.removeClass("outofstock"); // Kh√¥ng l√†m m·ªù n·∫øu s·ªë l∆∞·ª£ng h·ª£p l·ªá
                        row.find(".out-of-stock-label").remove(); // X√≥a th√¥ng b√°o
                        // B·∫≠t l·∫°i n√∫t tƒÉng khi s·ªë l∆∞·ª£ng h·ª£p l·ªá
                        row.find(".qty-up").prop("disabled", false);
                        // V√¥ hi·ªáu h√≥a n√∫t gi·∫£m khi s·ªë l∆∞·ª£ng b·∫±ng 1
                        row.find(".qty-down").prop("disabled", currentQty <= 1);
                    }
                });
            }

            // G·ªçi khi trang load
            checkStock();

            // G·ªçi khi s·ªë l∆∞·ª£ng thay ƒë·ªïi
            $(".qty-up, .qty-down").click(function () {
                var inputField = $(this).closest("tr").find(".qty-val");
                var currentQty = parseInt(inputField.val()) || 0;
                var stockQty = parseInt(inputField.attr("data-stock")) || 0;

                // Ki·ªÉm tra ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng trong kho
                if ($(this).hasClass("qty-up")) {
                    if (currentQty < stockQty) {
                        inputField.val(currentQty + 1);  // TƒÉng s·ªë l∆∞·ª£ng
                    }
                } else if ($(this).hasClass("qty-down")) {
                    if (currentQty > 1) {
                        inputField.val(currentQty - 1);  // Gi·∫£m s·ªë l∆∞·ª£ng
                    }
                }

                setTimeout(checkStock, 500); // Ki·ªÉm tra l·∫°i sau khi thay ƒë·ªïi
            });
        });


    </> *@



    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

    <!-- Vendor JS-->
    <script src="~/assets/js/vendor/modernizr-3.6.0.min.js"></script>
    <script src="~/assets/js/vendor/jquery-3.6.0.min.js"></script>
    <script src="~/assets/js/vendor/jquery-migrate-3.3.0.min.js"></script>
    <script src="~/assets/js/vendor/bootstrap.bundle.min.js"></script>
    <script src="~/assets/js/plugins/slick.js"></script>
    <script src="~/assets/js/plugins/jquery.syotimer.min.js"></script>
    <script src="~/assets/js/plugins/wow.js"></script>
    <script src="~/assets/js/plugins/jquery-ui.js"></script>
    <script src="~/assets/js/plugins/perfect-scrollbar.js"></script>
    <script src="~/assets/js/plugins/magnific-popup.js"></script>
    <script src="~/assets/js/plugins/select2.min.js"></script>
    <script src="~/assets/js/plugins/waypoints.js"></script>
    <script src="~/assets/js/plugins/counterup.js"></script>
    <script src="~/assets/js/plugins/jquery.countdown.min.js"></script>
    <script src="~/assets/js/plugins/images-loaded.js"></script>
    <script src="~/assets/js/plugins/isotope.js"></script>
    <script src="~/assets/js/plugins/scrollup.js"></script>
    <script src="~/assets/js/plugins/jquery.vticker-min.js"></script>
    <script src="~/assets/js/plugins/jquery.theia.sticky.js"></script>
    <script src="~/assets/js/plugins/jquery.elevatezoom.js"></script>
    <!-- Template  JS -->
    <script src="~/assets/js/main.js?v=6.0"></script>
    <script src="~/assets/js/shop.js?v=6.0"></script>
</body>

</html>
<script>
    let loadedVouchers = [];
    let selectedVoucherCode = null;

    function renderVoucherList(vouchers) {
        const container = document.getElementById("voucherListContainer");
        container.innerHTML = "";

        vouchers.forEach(v => {
            const disabledClass = v.disabled ? "bg-light text-muted" : "";
            const disabledAttr = v.disabled ? "disabled" : "";
            const conditionNote = v.disabled ? `<div class="text-danger small mt-1">This voucher cannot be used.</div>` : "";
            const textClass = v.disabled ? "text-muted" : "text-dark";
            const mutedClass = v.disabled ? "text-muted" : "text-dark";
            const maxDiscountNote = v.maxDiscountAmount ? `<div class="${mutedClass} small">Maximum discount: ${v.maxDiscountAmount}</div>` : "";
            const checkedAttr = v.code === selectedVoucherCode ? "checked" : "";

            const item = document.createElement("div");
            item.className = `voucher-item position-relative border rounded-3 d-flex p-3 mb-3 shadow-sm ${disabledClass}`;
            item.innerHTML = `
                                            <div class="voucher-left text-center pe-3">
                                                <div class="${v.disabled ? 'bg-secondary' : 'bg-danger'} text-white p-3 rounded-start">
                                                    <i class="bi bi-bag-fill fs-4 d-block"></i>
                                                    <div class="small mt-1">Foods  Voucher</div>
                                                </div>
                                            </div>
                                            <div class="flex-grow-1">
                                                <div class="fw-bold ${textClass}">${v.title} <span class="text-primary">(${v.code})</span></div>
                                                ${maxDiscountNote}
                                                <div class="${mutedClass} small">Minimum order ${v.minOrder}</div>
                                                <div class="${mutedClass} small mt-1">Expires: ${v.expire}
                                                    <a href="#" class="ms-2 text-decoration-underline text-primary voucher-condition-link" data-code="${v.code}" data-bs-toggle="modal" data-bs-target="#voucherConditionModal">Conditions</a>
                                                    ${conditionNote}
                                                </div>
                                            </div>
                                            <div class="position-absolute top-0 end-0 p-2">
                                                <span class="badge ${v.disabled ? 'bg-secondary' : 'bg-danger'} rounded-pill">x ${v.count}</span>
                                                <div class="form-check mt-2">
                                                    <input class="form-check-input" type="radio" name="voucherOption" value="${v.code}" ${disabledAttr} ${checkedAttr}>
                                                </div>
                                            </div>
                                        `;
            container.appendChild(item);
        });
    }

    function applySelectedVoucher() {
        const selected = document.querySelector('input[name="voucherOption"]:checked');
        if (selected && !selected.disabled) {
            const code = selected.value;
            selectedVoucherCode = code;
            const infoBox = document.getElementById("selectedVoucherInfo");
            if (infoBox) {
                infoBox.innerHTML = `1 Voucher selected <span class="text-danger">${code}</span>`;
            }

            const rawSubtotal = document.getElementById("subtotal-amount")?.innerText || "‚Ç´0";
            const currentSubtotal = parseInt(rawSubtotal.replace(/[^\d]/g, '')) || 0;

            fetch("/voucher/calculate-discount", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ code: code, orderTotal: currentSubtotal })
            })
                .then(res => {
                    if (!res.ok) throw new Error("Voucher cannot be applied.");
                    return res.json();
                })
                .then(data => {
                    const discount = Number(data.discountAmount);
                    const subtotal = Number(data.orderTotalAfterDiscount) + discount;
                    updateCartTotal(subtotal, discount, data.code, data.discountType);
                })
                .catch(err => {
                    console.error("Error calling discount API:", err);
                    alert("Cannot apply voucher: " + err.message);
                });

            const modal = bootstrap.Modal.getInstance(document.getElementById('voucherShopeeModal'));
            if (modal) modal.hide();
        } else {
            alert("Please select a valid discount code.");
        }
    }

    function updateCartTotal(originalSubtotal, discount, code, discountType) {
        if (typeof originalSubtotal !== "number" || typeof discount !== "number") {
            console.error("Invalid data from API:", { originalSubtotal, discount });
            return;
        }

        const discountedTotal = originalSubtotal - discount;
        const formattedDiscount = discountType === "Percent"
            ? `-${discount}%`
            : `-‚Ç´${discount.toLocaleString()}`;

        document.getElementById("subtotal-amount").innerText = `‚Ç´${originalSubtotal.toLocaleString()}`;
        document.getElementById("discount-amount").innerText = formattedDiscount;
        document.getElementById("codevocher").innerText = `${code}`;
        document.getElementById("cart-total").innerText = `‚Ç´${discountedTotal.toLocaleString()}`;
        document.getElementById("discount-row").style.display = discount > 0 ? "" : "none";
        document.getElementById("codevocher-row").style.display = discount > 0 ? "" : "none";
    }

    function handleConditionModal(code) {
        const v = loadedVouchers.find(x => x.code === code);
        const modalBody = document.querySelector("#voucherConditionModal .modal-body");
        if (!v) {
            modalBody.innerHTML = `<div class="text-danger">Voucher information not found.</div>`;
            return;
        }
        modalBody.innerHTML = `
                                        <p><strong>Code:</strong> ${v.code}</p>
                                        <p><strong>Minimum order:</strong> ${v.minOrder}</p>
                                        ${v.maxDiscountAmount ? `<p><strong>Maximum discount:</strong> ${v.maxDiscountAmount}</p>` : ""}
                                        <p><strong>Expires:</strong> ${v.expire}</p>
                                        <p><strong>Type:</strong> ${v.isStoreVoucher ? "Store voucher" : "Platform-wide voucher (admin)"}</p>
                                    `;
    }

    function attachVoucherEvents() {
        document.querySelectorAll('#voucherTab .nav-link').forEach(btn => {
            btn.addEventListener("click", function () {
                document.querySelectorAll('#voucherTab .nav-link').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                const type = this.getAttribute("data-type");
                const filtered = type === "store"
                    ? loadedVouchers.filter(v => v.isStoreVoucher)
                    : loadedVouchers;
                renderVoucherList(filtered);
            });
        });

        document.addEventListener("click", function (e) {
            const item = e.target.closest(".voucher-item");
            if (item && !item.classList.contains("text-muted")) {
                const radio = item.querySelector('input[type="radio"]');
                if (radio && !radio.disabled) {
                    radio.checked = true;
                    selectedVoucherCode = radio.value;
                    const infoBox = document.getElementById("selectedVoucherInfo");
                    if (infoBox) {
                        infoBox.innerHTML = `1 Voucher selected <span class="text-danger">${selectedVoucherCode}</span>`;
                    }
                }
            }

            const link = e.target.closest(".voucher-condition-link");
            if (link) {
                const code = link.getAttribute("data-code");
                handleConditionModal(code);
            }
        });

        document.getElementById("confirmVoucherBtn").addEventListener("click", applySelectedVoucher);

        document.getElementById("applyVoucherCode").addEventListener("click", async function () {
            const input = document.getElementById("voucherSearchInput").value.trim();
            const errorBox = document.getElementById("voucherSearchError");
            errorBox.innerText = "";

            if (!input) {
                errorBox.innerText = "Please enter a voucher code.";
                return;
            }

            try {
                const res = await fetch(`/voucher/search?code=${encodeURIComponent(input)}`);
                if (!res.ok) {
                    const err = await res.json();
                    errorBox.innerText = err.message || "Voucher not found.";
                    return;
                }

                const foundVoucher = await res.json();
                renderVoucherList([foundVoucher]);
            } catch (err) {
                console.error("Error searching voucher:", err);
                errorBox.innerText = "An error occurred while searching for voucher.";
            }
        });
    }
    async function loadVouchers(productId) {
        try {
            const res = await fetch(`/voucher/get-all?productId=${encodeURIComponent(productId)}`);
            if (!res.ok) throw new Error("Cannot load vouchers.");
            loadedVouchers = await res.json();
            renderVoucherList(loadedVouchers);
        } catch (err) {
            document.getElementById("voucherListContainer").innerHTML = `<div class="text-danger">Error loading vouchers.</div>`;
        }
    }

    function isValidGuid(str) {
        return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(str);
    }

    document.getElementById("voucherShopeeModal").addEventListener("show.bs.modal", async function () {
        var selectedProducts = [];

        $("input.form-check-input:checked").each(function () {
            selectedProducts.push($(this).val());
        });

        // L·ªçc ra productId h·ª£p l·ªá ƒë·∫ßu ti√™n
        const selectedProductId = selectedProducts.find(id => isValidGuid(id));

        if (!selectedProductId) {
            new Notify({
                status: 'error',
                title: 'Failed',
                text: 'Please select at least one valid product.',
                effect: 'fade',
                speed: 300,
                showIcon: true,
                showCloseButton: true,
                autoclose: true,
                autotimeout: 3000,
                position: 'right top'
            });
            return;
        }

        await loadVouchers(selectedProductId);
    });

    document.addEventListener("DOMContentLoaded", function () {
        const helpLink = document.getElementById('helpLink');
        if (helpLink) new bootstrap.Popover(helpLink);
        attachVoucherEvents();
    });

</script>
